{"version":3,"file":"app-C3aYoPwR.js","sources":["../../src/Utillity/logger.js","../../src/Task/MessageQueue.js","../../src/Task/SorotTask.js","../../src/Scenario.js","../../src/Task/Message.js","../../src/Task/ScenarioControl.js","../../src/Task/StatusMonitor.js","../../src/Sensor/SorotMotor.js","../../src/Sensor/ColorMonitor.js","../../src/Sensor/HWMonitor.js","../../src/Task/Sorot.js","../../src/SwitchMethod/SwitchMethod.js","../../src/SwitchMethod/TimeASM.js","../../src/SwitchMethod/VarASM.js","../../src/SwitchMethod/ColorASM.js","../../src/SwitchMethod/DirASM.js","../../src/SwitchMethod/DistanceASM.js","../../src/Task/Navigator.js","../../src/RunMethod/RunMethod.js","../../src/RunMethod/EdgePidRunning.js","../../src/RunMethod/LinearRunning.js","../../src/RunMethod/RevolutionRunning.js","../../src/RunMethod/RunMethodFactory.js","../../src/Task/RunControl.js","../../src/config/yaml-config-loader.js","../../src/robot.js","../../src/canvas.js","../../src/ScenarioJsonLoader.js","../../src/form.js","../../src/main.js"],"sourcesContent":["/**\r\n * ロギングレベル定義\r\n */\r\nexport const LOG_LEVEL_TRACE = 0;\r\nexport const LOG_LEVEL_DEBUG = 1;\r\nexport const LOG_LEVEL_INFO = 2;\r\nexport const LOG_LEVEL_WARN = 3;\r\nexport const LOG_LEVEL_ERROR = 4;\r\nexport const LOG_LEVEL_CRITICAL = 5;\r\nexport const LOG_LEVEL_OFF = 6;\r\n\r\n/**\r\n * 現在のロギングレベル。デフォルトはDEBUG。\r\n * 環境変数などで上書きすることも可能。\r\n */\r\n\r\nconst LOG_LEVEL = LOG_LEVEL_DEBUG;\r\n/**\r\n * タイムスタンプをフォーマットするヘルパー関数\r\n * @param {Date} date - フォーマットするDateオブジェクト\r\n * @returns {string} YYYY-MM-DD HH:MM:SS 形式の文字列\r\n */\r\nconst formatTimestamp = (date) => {\r\n    return date.toISOString().slice(0, 19).replace('T', ' ');\r\n};\r\n\r\n/**\r\n * TRACEレベルのログを出力します。\r\n * @param {...any} args - ログメッセージの引数\r\n */\r\nexport const LOG_TRACE = (...args) => {\r\n    if (LOG_LEVEL <= LOG_LEVEL_TRACE) {\r\n        const now = new Date();\r\n        const timestamp = formatTimestamp(now);\r\n        const msec = String(now.getMilliseconds()).padStart(3, '0');\r\n        console.log(`[${timestamp}.${msec}]`, ...args);\r\n    }\r\n};\r\n\r\n/**\r\n * DEBUGレベルのログを出力します。\r\n * ETRobocon API に存在するLOG_DBGに対応。\r\n * @param {...any} args - ログメッセージの引数\r\n */\r\nexport const LOG_DBG = (...args) => {\r\n    if (LOG_LEVEL <= LOG_LEVEL_DEBUG) {\r\n        const now = new Date();\r\n        const timestamp = formatTimestamp(now);\r\n        const msec = String(now.getMilliseconds()).padStart(3, '0');\r\n        console.log(`[${timestamp}.${msec}]`, ...args);\r\n    }\r\n};\r\n\r\n/**\r\n * INFOレベルのログを出力します。\r\n * ETRobocon API に存在するLOG_INFに対応。\r\n * @param {...any} args - ログメッセージの引数\r\n */\r\nexport const LOG_INF = (...args) => {\r\n    if (LOG_LEVEL <= LOG_LEVEL_INFO) {\r\n        console.info(...args);\r\n    }\r\n};\r\n\r\n/**\r\n * WARNレベルのログを出力します。\r\n * @param {...any} args - ログメッセージの引数\r\n */\r\nexport const LOG_WARN = (...args) => {\r\n    if (LOG_LEVEL <= LOG_LEVEL_WARN) {\r\n        console.warn(...args);\r\n    }\r\n};\r\n\r\n/**\r\n * ERRORレベルのログを出力します。\r\n * @param {...any} args - ログメッセージの引数\r\n */\r\nexport const LOG_ERRORS = (...args) => {\r\n    if (LOG_LEVEL <= LOG_LEVEL_ERROR) {\r\n        console.error(...args);\r\n    }\r\n};\r\n\r\n/**\r\n * CRITICALレベルのログを出力します。\r\n * @param {...any} args - ログメッセージの引数\r\n */\r\nexport const LOG_CRITICAL = (...args) => {\r\n    if (LOG_LEVEL <= LOG_LEVEL_CRITICAL) {\r\n        console.error(...args);\r\n    }\r\n};\r\n","// MessageQueue.js\r\n// Converted from MessageQueue.cpp\r\n\r\n// import { Message } from './Message.js';\r\nimport { LOG_TRACE, LOG_DBG, LOG_INF, LOG_WARN, LOG_ERRORS, LOG_CRITICAL } from '../Utillity/logger.js';\r\n\r\nexport class MessageQueue {\r\n\tconstructor(task) {\r\n\t\tthis.mHead = null;\r\n\t\tthis.mTail = null;\r\n\t\tthis.mQueCnt = 0;\r\n\t\tthis.mTask = task;\r\n\t}\r\n\r\n\tsend(msg) {\r\n\t\tmsg.setNext(null);\r\n\r\n\t\t// 排他制御はJSでは基本不要（シングルスレッド前提）\r\n\t\tif (this.mTail) {\r\n\t\t\tthis.mTail.setNext(msg);\r\n\t\t}\r\n\t\tthis.mTail = msg;\r\n\t\tif (this.mHead === null) {\r\n\t\t\tthis.mHead = msg;\r\n\t\t}\r\n\t\tthis.mQueCnt++;\r\n\r\n\t\t// OSのイベント通知は省略（必要ならコールバックとかで代用）\r\n\t\t// console.log(`Message sent: task=${this.mTask}, id=${msg.getId()}`);\r\n\t}\r\n\r\n\tget() {\r\n\t\tlet msg = null;\r\n\r\n\t\tif (this.mHead) {\r\n\t\t\tmsg = this.mHead;\r\n\t\t\tthis.mHead = this.mHead.getNext();\r\n\t\t\tthis.mQueCnt--;\r\n\r\n\t\t\tif (this.mQueCnt === 0) {\r\n\t\t\t\tthis.mTail = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn msg;\r\n\t}\r\n\r\n\r\n\twait() {\r\n\t\twhile (true) {\r\n\t\t\tif (this.isReceived()) {\r\n\t\t\t\tLOG_TRACE(\"msg received.\\n\");\r\n\t\t\t\treturn this.get();\r\n\t\t\t}\r\n\t\t\tnew Promise(resolve => setTimeout(resolve, 100));\r\n\t\t}\r\n\t}\r\n\r\n\tisReceived() {\r\n\t\treturn this.mHead !== null;\r\n\t}\r\n}\r\n","// SorotTask.js\r\n// Implementation of the class SorotTask (converted from C++)\r\n// Original author: fcsk\r\n\r\n// import { Message } from './Message.js';\r\nimport { MessageQueue } from './MessageQueue.js';\r\nimport { LOG_TRACE, LOG_DBG, LOG_INF, LOG_WARN, LOG_ERRORS, LOG_CRITICAL } from '../Utillity/logger.js';\r\n\r\nexport class SorotTask {\r\n\tconstructor(task) {\r\n\t\tthis.mQueue = new MessageQueue(task);\r\n\t}\r\n\r\n\t/**\r\n\t * メッセージをブロッキングで取得するよっ\r\n\t * @returns {Message|null}\r\n\t */\r\n\tgetMessage() {\r\n\t\tlet msg = null;\r\n\t\tif (this.mQueue) {\r\n\t\t\t// TODO\r\n\t\t\tmsg = this.mQueue.get();\r\n\t\t}\r\n\t\treturn msg;\r\n\t}\r\n\r\n\t/**\r\n\t * メッセージをノンブロッキングで取得するよっ（なければnull）\r\n\t * @returns {Message|null}\r\n\t */\r\n\tpeekMessage() {\r\n\t\tlet msg = null;\r\n\t\tif (this.mQueue) {\r\n\t\t\tmsg = this.mQueue.get();\r\n\t\t\tif (msg) {\r\n\t\t\t\tLOG_TRACE(`mQueue->get(): ${msg.getId()}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn msg;\r\n\t}\r\n\r\n\t/**\r\n\t * 指定したメッセージを送信するよっ\r\n\t * @param {Message} message\r\n\t */\r\n\tsendMessage(message) {\r\n\t\tif (this.mQueue) {\r\n\t\t\tthis.mQueue.send(message);\r\n\t\t\tif (message) {\r\n\t\t\t\tLOG_TRACE(`mQueue->send: ${message.getId()}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","///////////////////////////////////////////////////////////\r\n//  Scenario.js\r\n//  Implementation of the Class Scenario\r\n//  Created on:      12-8-2011 22:17:04\r\n//  Original author: fcsk\r\n///////////////////////////////////////////////////////////\r\n\r\nexport class Scenario {\r\n    static INSERT = 0;\r\n\tstatic UPDATE = 1;\r\n\tstatic ADD = 2;\r\n\t\r\n    constructor() {\r\n        this.mArrCommandSet = [];\r\n        this.mIndex = 0;\r\n    }\r\n\r\n    clear() {\r\n        this.mArrCommandSet = [];\r\n    }\r\n\r\n    insertCommandSet(commandSet) {\r\n        for (let i = 0; i < this.mArrCommandSet.length; i++) {\r\n            const itr = this.mArrCommandSet[i];\r\n            if (itr.SNO === commandSet.SNO && itr.CNO === commandSet.CNO) {\r\n                this.mArrCommandSet.splice(i, 1, commandSet);\r\n                return Scenario.UPDATE;\r\n            }\r\n            if (itr.SNO === commandSet.PRVSNO && itr.CNO === commandSet.PRVCNO) {\r\n                this.mArrCommandSet.splice(i + 1, 0, commandSet);\r\n                return Scenario.INSERT;\r\n            }\r\n        }\r\n        this.mArrCommandSet.push(commandSet);\r\n        return Scenario.ADD;\r\n    }\r\n\r\n    getCommandSet() {\r\n        if (this.mIndex < this.mArrCommandSet.length) {\r\n            return this.mArrCommandSet[this.mIndex];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    searchCommandSet(senarioNo, commandSetNo) {\r\n        for (let count = 0; count < this.mArrCommandSet.length; count++) {\r\n            const itr = this.mArrCommandSet[count];\r\n            if (itr.SNO === senarioNo && itr.CNO === commandSetNo) {\r\n                this.mIndex = count;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    getRecordCount() { return this.mArrCommandSet.length; }\r\n\r\n\tmoveFirst() { this.mIndex = 0; }\r\n\tmoveNext()  { this.mIndex++; }\r\n}\r\n","// Message.js\r\n// Converted from C++ to JavaScript (ES6 class)\r\n\r\nexport class Message {\r\n\tstatic CMD_INIT = 0x11;\r\n\tstatic CMD_START = 0x12;\r\n\tstatic CMD_GET_CALIBINFO = 0x14;\r\n\tstatic CMD_SET_SOROTINFO = 0x15;\r\n\tstatic CMD_START_CALIB = 0x16;\r\n\tstatic CMD_SET_INDIVIDUAL = 0x17;\r\n\tstatic CMD_GET_SOROTINFO = 0x21;\r\n\tstatic CMD_CHANGE_SCENARIO = 0x31;\r\n\tstatic CMD_INSERT_SCENARIO = 0x32;\r\n\tstatic CMD_CLEAR_SCENARIO = 0x33;\r\n\tstatic CMD_STOP = 0x34;\r\n\tstatic CMD_SET_SCENARIOINFO = 0x35;\r\n\tstatic CMD_SYNC = 0x36;\r\n\tstatic CMD_INSERT_SUB_LIST = 0x37;\r\n\tstatic CMD_INSERT_SCN_LIST = 0x38;\r\n\tstatic CMD_COMPLETE_BT = 0x90;\r\n\tstatic CMD_CORRECT_COORDINF = 0x91;\r\n\tstatic CMD_SONARSENSOR = 0x92;\r\n\r\n\tstatic ERR_OK\t\t = 0x00;\r\n\tstatic ERR_EXECCMD\t = 0x01;\r\n\tstatic ERR_SCNRONO\t = 0x02;\r\n\tstatic ERR_CHGSCNRO\t = 0x03;\r\n\tstatic ERR_STATUS\t = 0x21;\r\n\tstatic ERR_COMMAND\t = 0x41;\r\n\tstatic ERR_DATALEN\t = 0x42;\r\n\tstatic ERR_PARAM\t = 0x43;\r\n\tstatic ERR_SEQNO\t = 0x44;\r\n\tstatic ERR_CHECKSUM\t = 0x45;\r\n\tstatic ERR_HARDWARE\t = 0x61;\r\n\tstatic ERR_LOGICAL\t = 0x91;\r\n\tstatic ERR_FATAL\t = 0x99;\r\n\r\n\tconstructor(cmdId = 0, cmdData = null, dataLen = 0) {\r\n\t\t// コンストラクタの引数が3つならPCからの受信用\r\n\t\tthis.mId = cmdId;\r\n\t\tthis.mDataLen = dataLen;\r\n\t\tthis.mData = cmdData;\r\n\r\n\t\tthis.mNext = null;\r\n\t}\r\n\r\n\tgetTime() {\r\n\t\treturn this.mTime;\r\n\t}\r\n\r\n\tgetId() {\r\n\t\treturn this.mId;\r\n\t}\r\n\r\n\tgetData() {\r\n\t\treturn this.mData;\r\n\t}\r\n\r\n\tgetDataLength() {\r\n\t\treturn this.mDataLen;\r\n\t}\r\n\r\n\tgetNext() {\r\n\t\treturn this.mNext;\r\n\t}\r\n\r\n\tsetNext(nextMessage) {\r\n\t\tthis.mNext = nextMessage;\r\n\t}\r\n}\r\n\r\n// named export already provided by class declaration\r\n","// ScenarioControl.js\r\n// Implementation of the Class ScenarioControl\r\n// Created on:      12-8-2011 22:17:05\r\n// Original author: fcsk\r\n\r\nimport { SorotTask } from './SorotTask.js';\r\nimport { Scenario } from '../Scenario.js';\r\nimport { Message } from './Message.js';\r\nimport { LOG_TRACE, LOG_DBG, LOG_INF, LOG_WARN, LOG_ERRORS, LOG_CRITICAL } from '../Utillity/logger.js';\r\n\r\nexport class ScenarioControl extends SorotTask {\r\n    static mSingleton = null;\r\n    static OFF = false;\r\n    static ON = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this.mScenario = new Scenario();\r\n        this.mIsSync = false;\r\n        this.mSubScenarioList = [];\r\n        this.mSubScnListIndex = 0;\r\n\r\n        this.mScenarioNoList = [];\r\n        this.mScnNoListIndex = 0;\r\n    }\r\n\r\n    start() {\r\n        // CommandDispatcher.registerMessageQueue(CMDGRP_SCENARIO, this); // コマンド受信登録\r\n        console.log(\"ScenarioCtrl start\");\r\n    }\r\n\r\n    run() {\r\n        let rcvMsg = this.peekMessage();\r\n        if (rcvMsg !== null) {\r\n            LOG_TRACE(`ScenarioCtrl run. :${rcvMsg.getId()}`);\r\n            switch (rcvMsg.getId()) {\r\n                case Message.CMD_CLEAR_SCENARIO:\r\n                    console.log(\"CMD_CLEAR_SCENARIO\");\r\n                    this.clearScenario(rcvMsg);\r\n                    break;\r\n                case Message.CMD_INSERT_SCENARIO:\r\n                    console.log(\"CMD_INSERT_SCENARIO\");\r\n                    this.insertScenario(rcvMsg);\r\n                    break;\r\n                case Message.CMD_START_CALIB: // キャリブレーション開始\r\n                    console.log(\"CMD_START_CALIB\");\r\n                    this.preStartScenario();\r\n                    break;\r\n                case Message.CMD_START:\r\n                    console.log(\"CMD_START\");\r\n                    this.nextScenario(rcvMsg, true);\r\n                    break;\r\n                case Message.CMD_STOP:\r\n                    console.log(\"CMD_STOP\");\r\n                    this.stopScenario(rcvMsg);\r\n                    break;\r\n                case Message.CMD_CHANGE_SCENARIO:\r\n                    console.log(\"CMD_CHANGE_SCENARIO\");\r\n                    this.nextScenario(rcvMsg, false);\r\n                    break;\r\n                case Message.CMD_SYNC:\r\n                    console.log(\"CMD_SYNC\");\r\n                    this.mIsSync = true;\r\n                    break;\r\n                case Message.CMD_INSERT_SUB_LIST:\r\n                    console.log(\"CMD_INSERT_SUB_LIST\");\r\n                    this.insertSubScenarioList();\r\n                    break;\r\n                case Message.CMD_INSERT_SCN_LIST:\r\n                    console.log(\"CMD_INSERT_SCN_LIST\");\r\n                    this.insertScenarioNoList(rcvMsg);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            rcvMsg = null;\r\n        }\r\n    }\r\n\r\n    clearScenario(rcvMsg) {\r\n        this.mScenario = new Scenario();\r\n        // COMMANDDISPATCHER.sendResponse(rcvMsg, Message.ERR_OK);\r\n    }\r\n\r\n    insertScenario(rcvMsg) {\r\n        let data = rcvMsg.getData();\r\n\r\n        this.mScenario.insertCommandSet(data);\r\n        console.log(`ScenaIN ${data.SNO} ${data.CNO}`);\r\n        // COMMANDDISPATCHER.sendResponse(rcvMsg, Message.ERR_OK);\r\n    }\r\n\r\n    insertSubScenarioList() {\r\n        this.mSubScenarioList.push(this.mScenario);\r\n        this.mScenario = new Scenario();\r\n    }\r\n\r\n    insertScenarioNoList(rcvMsg) {\r\n        console.log(\"insertScenarioNoList 開始\");\r\n        let data = rcvMsg.getData();\r\n        let len = rcvMsg.getDataLength() - RCVHEADERSIZE;\r\n\r\n        for (let idx = 0; idx < len; idx++) {\r\n            this.mScenarioNoList.push(data[idx]);\r\n            console.log(`ScnNo:${idx} ${data[idx]}`);\r\n        }\r\n        console.log(\"insertScenarioNoList 完了\");\r\n    }\r\n\r\n    preStartScenario() {\r\n        console.log(\"preStartScenario 開始\");\r\n        let commandSet = {};\r\n        let sndMsg;\r\n\r\n        // TODO\r\n        // this.mScenario = this.mSubScenarioList[this.mScenarioNoList[0]];\r\n        this.mScenario = this.mSubScenarioList[0];\r\n\r\n        // シナリオ取得\r\n        if (!this.mScenario) return;\r\n        commandSet = this.mScenario.getCommandSet();\r\n\r\n        console.log(`${this.constructor.name} ${commandSet.SNO} ${commandSet.CNO}`);\r\n\r\n        // 走行制御タスクにシナリオ切替通知\r\n        sndMsg = new Message(Message.CMD_CHANGE_SCENARIO, commandSet);\r\n        window.RUNCONTROL.sendMessage(sndMsg);\r\n\r\n        // ナビゲータタスクにシナリオ切替通知\r\n        sndMsg = new Message(Message.CMD_CHANGE_SCENARIO, commandSet);\r\n        window.NAVIGATOR.sendMessage(sndMsg);\r\n\r\n        console.log(\"preStartScenario 完了\");\r\n    }\r\n\r\n    stopScenario(rcvMsg) {\r\n        // Todo: シナリオ停止処理未実装\r\n    }\r\n\r\n    nextScenario(rcvMsg, bStart) {\r\n        \r\n        let commandSet = {};\r\n        let sndMsg;\r\n        // SPEAKER.beep();\r\n\r\n        let data = rcvMsg.getData();\r\n        if (bStart) {\r\n            if (data[0] === 0 && data[1] === 0) {\r\n                this.mScenario.moveFirst();\r\n            } else {\r\n                let ret = this.mScenario.searchCommandSet(data[0], data[1]);\r\n                if (!ret) {\r\n                    console.log(`ScenaNG ${data[0]} ${data[1]}`);\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            if (data[0] === 1) {\r\n                this.mScenario.moveNext();\r\n            } else {\r\n                let ret = this.mScenario.searchCommandSet(data[1], data[2]);\r\n                if (!ret) {\r\n                    console.log(`ScenaNG ${data[0]} ${data[1]}`);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        LOG_DBG(\"ScenarioControl::nextScenario 1\");\r\n\r\n        if (this.IsEndScenario()) {\r\n            this.mScnNoListIndex++;\r\n            if (this.mScnNoListIndex < this.mScenarioNoList.length) {\r\n                this.mScenario = this.mSubScenarioList[this.mScenarioNoList[this.mScnNoListIndex]];\r\n                this.mScenario.moveFirst();\r\n                console.log(`ScnNo:${this.mScenarioNoList[this.mScnNoListIndex]}`);\r\n            } else {\r\n                COMMANDDISPATCHER.sendResponse(rcvMsg, Message.ERR_OK);\r\n                return;\r\n            }\r\n        }\r\n\r\n        commandSet = this.mScenario.getCommandSet();\r\n        // let coordinate = {}; // 座標情報\r\n        // STATUSMONITOR.getCoordinateInfo(coordinate);\r\n        console.log(`SNO:${commandSet.SNO} CNO:${commandSet.CNO}`);\r\n\r\n        // Before sending scenario change, capture current robot state for marker\r\n        try {\r\n            // Deep clone commandSet and robot state to freeze marker data\r\n            const marker = {\r\n                SNO: this.mScenario.getCommandSet().SNO,\r\n                CNO: this.mScenario.getCommandSet().CNO,\r\n                timestamp: Date.now(),\r\n                robot: JSON.parse(JSON.stringify(window.robot)),\r\n                isDraw: false,\r\n                commandSet: JSON.parse(JSON.stringify(commandSet))\r\n            };\r\n            if (!Array.isArray(window.SCENARIO_MARKERS)) window.SCENARIO_MARKERS = [];\r\n            window.SCENARIO_MARKERS.push(marker);\r\n        } catch (e) {\r\n            console.warn('Failed to capture marker', e);\r\n        }\r\n\r\n        // 座標補正\r\n        if (commandSet.CoordCorrectInfo.ACAF > 0) {\r\n            sndMsg = new Message(Message.CMD_CORRECT_COORDINF, commandSet.CoordCorrectInfo);\r\n            window.STATUSMONITOR.sendMessage(sndMsg);\r\n        }\r\n\r\n        // 超音波センサー\r\n        let sonorEnable = ScenarioControl.OFF;\r\n        if (commandSet.RunInfo.SONAR) sonorEnable = ScenarioControl.ON;\r\n        sndMsg = new Message(Message.CMD_SONARSENSOR, sonorEnable);\r\n        window.STATUSMONITOR.sendMessage(sndMsg);\r\n\r\n        // 走行制御タスクにシナリオ切替通知\r\n        sndMsg = new Message(Message.CMD_CHANGE_SCENARIO, commandSet);\r\n        window.RUNCONTROL.sendMessage(sndMsg);\r\n\r\n        // ナビゲータタスクにシナリオ切替通知\r\n        sndMsg = new Message(Message.CMD_CHANGE_SCENARIO, commandSet);\r\n        window.NAVIGATOR.sendMessage(sndMsg);\r\n\r\n        if (bStart) {\r\n            window.RUNCONTROL.ArmOnly = false;\r\n        }\r\n    }\r\n\r\n    IsEndScenario() {\r\n        return (this.mScenario.getCommandSet().SNO === 0 && this.mScenario.getCommandSet().CNO === 0);\r\n    }\r\n\r\n    static getInstance() {\r\n        if (ScenarioControl.mSingleton == null) {\r\n            ScenarioControl.mSingleton = new ScenarioControl();\r\n        }\r\n        return ScenarioControl.mSingleton;\r\n    }\r\n    peekMessage() {\r\n        return super.peekMessage();\r\n    }\r\n    getMessage() {\r\n        return super.getMessage();\r\n    }\r\n    sendMessage(message) {\r\n        super.sendMessage(message);\r\n    }\r\n}\r\n\r\nwindow.SCENARIOCONTROL = ScenarioControl.getInstance();","// StatusMonitor.js\r\nimport { SorotTask } from './SorotTask.js';\r\nimport { Message } from './Message.js';\r\nimport { LOG_TRACE, LOG_DBG, LOG_INF, LOG_WARN, LOG_ERRORS, LOG_CRITICAL } from '../Utillity/logger.js';\r\n\r\nexport class StatusMonitor extends SorotTask {\r\n    static mSingleton = null;\r\n\r\n    constructor(colorMonitor, hwMonitor) {\r\n        super();\r\n        this.colorMonitor = colorMonitor;\r\n        this.hwMonitor = hwMonitor;\r\n        this.msecCount = 0;\r\n    }\r\n\r\n    start() {\r\n        console.log(\"TaskStsMon run\");\r\n        this.hwMonitor.resetDevice();\r\n        // balance_init(); // 必要に応じてコメントを外してください\r\n        // SetRelAlarm(AlarmStsMon, 1, TASK_PERIOD); // 必要に応じてコメントを外してください\r\n    }\r\n\r\n    run() {\r\n        LOG_TRACE(\"TaskStsMon run\");\r\n        let rcvMsg = this.peekMessage();\r\n        if (rcvMsg !== null) {\r\n            switch (rcvMsg.getId()) {\r\n                case Message.CMD_CORRECT_COORDINF:\r\n                    window.HWMONITOR.correctCoordinateInfo(rcvMsg.getData());\r\n                    break;\r\n                case Message.CMD_SONARSENSOR:\r\n                    window.HWMONITOR.setSonarSwitch(rcvMsg.getData());\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            rcvMsg = null;\r\n        }\r\n\r\n        // コース色情報取得\r\n        this.colorMonitor.read();\r\n\r\n        // 車体情報取得\r\n        if (this.msecCount === 0) {\r\n            this.msecCount = 1;\r\n            this.hwMonitor.read();\r\n        } else {\r\n            this.msecCount = 0;\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        // CancelAlarm(AlarmStsMon); // 必要に応じてコメントを外してください\r\n    }\r\n\r\n    \r\n    static getInstance() {\r\n        if (StatusMonitor.mSingleton == null) {\r\n            StatusMonitor.mSingleton = new StatusMonitor(window.COLORMONITOR, window.HWMONITOR);\r\n        }\r\n        return StatusMonitor.mSingleton;\r\n    }\r\n\r\n    resetMotor() {\r\n        this.hwMonitor.resetDevice(true);\r\n        // balance_init(); // 必要に応じてコメントを外してください\r\n    }\r\n\r\n    getColorInfo(colorInfo) {\r\n        Object.assign(colorInfo, this.colorMonitor.getColorInfo());\r\n    }\r\n\r\n    getBodyInfo(bodyInfo) {\r\n        Object.assign(bodyInfo, this.hwMonitor.getBodyInfo());\r\n    }\r\n\r\n    getCoordinateInfo(coordinateInfo) {\r\n        try {\r\n            Object.assign(coordinateInfo, this.hwMonitor.getCoordinateInfo());\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    peekMessage() {\r\n        return super.peekMessage();\r\n    }\r\n    getMessage() {\r\n        return super.getMessage();\r\n    }\r\n    sendMessage(message) {\r\n        super.sendMessage(message);\r\n    }\r\n\r\n}","// SorotMotor.js\r\n// import { \r\n//   pup_motor_get_device,\r\n//   pup_motor_get_power,\r\n//   pup_motor_set_power,\r\n//   pup_motor_get_count,\r\n//   pup_motor_setup,\r\n//   PUP_DIRECTION_COUNTERCLOCKWISE,\r\n//   PUP_DIRECTION_CLOCKWISE\r\n// } from './pup_motor.js'; // 仮のラッパーモジュール\r\n\r\nexport class SorotMotor {\r\n\r\n  static LEFT = 0;\r\n  static RIGHT = 1;\r\n  static MOTOR_NUM = 2;\r\n\r\n  constructor(name) {\r\n    this.name = name;\r\n    this.fg_motor = null;\r\n    this.pwm = 0;\r\n    this.count = 0;\r\n  }\r\n\r\n  setUp(port, msg) {\r\n    console.log(`motor setup: ${msg}`);\r\n    // this.fg_motor = pup_motor_get_device(port);\r\n\r\n    if (msg === \"left\") {\r\n      console.log(`motor_setup left: ${msg}`);\r\n      // pup_motor_setup(this.fg_motor, PUP_DIRECTION_COUNTERCLOCKWISE, true);\r\n    } else {\r\n      console.log(`motor_setup other: ${msg}`);\r\n      // pup_motor_setup(this.fg_motor, PUP_DIRECTION_CLOCKWISE, true);\r\n    }\r\n  }\r\n\r\n  getPWM() {\r\n    if (isNaN(this.pwm)) {\r\n      return 0;\r\n    }\r\n    return this.pwm;\r\n    // return pup_motor_get_power(this.fg_motor);\r\n  }\r\n\r\n  setPWM(pwm) {\r\n    this.pwm = pwm;\r\n    this.updateLeftPowerDisplay();\r\n  }\r\n\r\n  getCount() {\r\n    const Ts = 0.1; // サンプリング周期\r\n    const alpha = 1; // 定数α\r\n    const beta = 0.5; // 定数β\r\n    const J = 0.01; // 慣性モーメント\r\n    const tau_c = 0.1; // 摩擦トルク\r\n    const tau_load = 0.1; // 負荷トルク\r\n\r\n    // 状態変数\r\n    let theta = 0; // 角度\r\n    let omega = 0; // 角速度\r\n\r\n    // モーターの出力を取得\r\n    const u = this.getPWM(); // PWM値を出力として使用\r\n\r\n    // オイラー近似による状態更新\r\n    omega += Ts * (alpha * u - beta * omega - (J * tau_c * Math.sign(omega)) - (J * tau_load));\r\n    theta += Ts * omega;\r\n\r\n    this.count += theta * window.robot.maxSpeed;\r\n    return this.count; // エンコーダ値を返す\r\n  }\r\n\r\n  reset() {\r\n    // 本来: pup_motor_reset_count(this.fg_motor)\r\n    return 0;\r\n  }\r\n\r\n  // leftPower表示用のメソッド\r\n  updateLeftPowerDisplay() {\r\n    window.formData.setValue(this.name, this.getPWM());\r\n  }\r\n}\r\n","import { LOG_TRACE, LOG_DBG, LOG_INF, LOG_WARN, LOG_ERRORS, LOG_CRITICAL } from '../Utillity/logger.js';\r\n\r\n// しきい値は仮の設定です。走行体にあわせて変更必要\r\nconst REFLECTION_BLACK_THRESHOLD\t= 10;\r\nconst REFLECTION_RED_GREEN_BLUE_THRESHOLD\t= 40;\r\nconst REFLECTION_YELLOW_THRESHOLD\t= 60;\r\nconst REFLECTION_WHITE_THRESHOLD\t= 100;\r\n//色相: 青色判定下限値\r\nconst HUE_THRESHOULD_BLUE_COLOR_LOWER_BOUND\t= 180;\r\n//色相: 青色判定上限値\r\nconst HUE_THRESHOULD_BLUE_COLOR_UPPER_BOUND\t= 275;\r\n\r\n//彩度: 白黒判定しきい値\r\n//#define SAT_THRESHOULD_MONO_COLOR   5\r\nconst SAT_THRESHOULD_MONO_COLOR\t= 110;\r\n//彩度: 青色判定下限値\r\nconst SAT_THRESHOULD_BLUE_COLOR_LOWER_BOUND\t= 90;\r\n\r\n//明度: 白黒判定しきい値\r\nconst VAL_THRESHOULD_BLACK_WHITE\t= 60;\r\n//明度: 青色判定下限値\r\nconst VAL_THRESHOULD_BLUE_COLOR_LOWER_BOUND\t= 45;\r\n\r\nconst CHANGERATE_CNT\t= 20;\t//変化率の幅計算のための要素数\r\n\r\n//色種別\r\nconst Color = {\r\n\tWHITE: 0,\r\n\tGRAY: 1,\r\n\tBLACK: 2,\r\n\tBLUE: 3,\r\n\tOTHER: 4,\r\n\tNONE: 5\r\n};\r\n\r\nexport class ColorMonitor {\r\n    blueCount = 0;\r\n\r\n    constructor(port, changeCount = CHANGERATE_CNT) {\r\n      this.port = port;\r\n      this.blueCount = 0;\r\n    //   this.sensor = new ColorSensor(port);\r\n      this.changeCount = changeCount;\r\n      this.changeRateArray = Array(changeCount).fill(0);\r\n      this.changeRateIndex = 0;\r\n      this.sumChangeRateArray = 0;\r\n      this.diffSumChangeRateAry = 0;\r\n      this.colorInfo = {\r\n        color: Color.NONE,\r\n        ColorSensorValue: 0,\r\n        diffValue: 0,\r\n        diffSumChangeRateAry: 0,\r\n        diffSumChangeRateAryLast: 0\r\n      };\r\n    }\r\n  \r\n    getBrightness() {\r\n      return robot.sensor.brightness;\r\n    }\r\n  \r\n    read() {\r\n      const value = this.getBrightness();\r\n      LOG_TRACE(`Reflection: ${value}`);\r\n      this.colorInfo.color = value < 10 ? Color.BLACK : value > 60 ? Color.WHITE : Color.GRAY;\r\n      this.colorInfo.ColorSensorValue = value;\r\n      this.colorInfo.diffValue = this.getChangeRateWidth(value);\r\n      this.colorInfo.diffSumChangeRateAryLast = this.colorInfo.diffSumChangeRateAry;\r\n      this.colorInfo.diffSumChangeRateAry = this.diffSumChangeRateAry;\r\n    }\r\n  \r\n    getChangeRateWidth(value) {\r\n      this.changeRateArray[this.changeRateIndex % this.changeCount] = value;\r\n      this.changeRateIndex++;\r\n      const count = Math.min(this.changeRateIndex, this.changeCount);\r\n      const values = this.changeRateArray.slice(0, count);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      const sum = values.reduce((a, b) => a + b, 0);\r\n      this.diffSumChangeRateAry = this.sumChangeRateArray - sum;\r\n      this.sumChangeRateArray = sum;\r\n      return max - min;\r\n    }\r\n\r\n    getColorInfo() { return this.colorInfo; }\r\n\r\n  }\r\n  ","// Sensor/HWMonitor.js\r\nimport { SorotMotor } from './SorotMotor.js';\r\n\r\nexport class CoordinateInfo {\r\n    constructor() {\r\n        this.x = 0,                      // X座標\r\n        this.y = 0,                      // Y座標\r\n        this.distance = 0,               // 距離\r\n        this.driveDirection = 0,         // 進行方向\r\n        this.driveDirectionAve = 0,      // 平均進行方向\r\n        this.driveDirectionAveLast = 0,  // 最後の平均進行方向\r\n        this.isObstacle = false;         // 障害物の有無\r\n    }\r\n}\r\n\r\nexport class HWMonitor {\r\n    constructor(motorL, motorR) {\r\n        this.motorL = motorL;\r\n        this.motorR = motorR;\r\n        this.resetDevice();\r\n        this.lastDistance = 0;\r\n        this.lastDriveDirection = 0;\r\n        this.spdSmplCnt = 0;\r\n        this.isCorrect = { LEFT: false, RIGHT: false };\r\n        this.beforeEncoderValue = { LEFT: 0, RIGHT: 0 };\r\n        this.storedEncoder = { LEFT: 0, RIGHT: 0 };\r\n        this.driveDirectionIdx = 0;\r\n        this.coordinate = new CoordinateInfo();\r\n        this.bodyInfo = { EncoderValue: { LEFT: 0, RIGHT: 0 }, \r\n        sonarOn: 0, \r\n        GyroSenserValue: 0, \r\n        SonarValue: 0, \r\n        SonarTarget: { isFound: false }, \r\n        BattyValue: 0, \r\n        TurnSpeed: 0, \r\n        RunSpeed: 0 };\r\n        this.drive_direction_cnt = window.config.robot.direction.drive_direction_cnt;\r\n        this.driveDirectionAry = Array(window.drive_direction_cnt).fill(0);\r\n        this.distanceDriveDirectionAry = Array(window.drive_direction_cnt).fill(0);\r\n        this.speedBuf = Array(window.config.robot.speed.sample_num).fill(0);\r\n        this.setWheelTransParam(window.config.robot.wheel.radius)\r\n \r\n    // };\r\n        // this.relCoordinateInfo = new CoordinateInfo();\r\n    }\r\n\r\n    setWheelTransParam(wheelRadius) {\r\n        this.wheelTransParam = ((2 * Math.PI * wheelRadius) * 100 / 100) / 360;\r\n    }\r\n\r\n    resetDevice(storeEncoder = false) {\r\n        if (storeEncoder) {\r\n            this.storedEncoder.LEFT += this.motorL.getCount();\r\n            this.storedEncoder.RIGHT += this.motorR.getCount();\r\n        }\r\n        this.motorL.reset();\r\n        this.motorR.reset();\r\n        this.coordinate = new CoordinateInfo();\r\n        this.bodyInfo = { EncoderValue: { LEFT: 0, RIGHT: 0 }, \r\n        sonarOn: 0, \r\n        GyroSenserValue: 0, \r\n        SonarValue: 0, \r\n        SonarTarget: { isFound: false }, \r\n        BattyValue: 0, \r\n        TurnSpeed: 0, \r\n        RunSpeed: 0 };\r\n    }\r\n\r\n    setGyroOffSet(offset) {\r\n        this.gyroOffSet = offset;\r\n    }\r\n\r\n    read() {\r\n        let newEncoderL = this.motorL.getCount();\r\n        let newEncoderR = this.motorR.getCount();\r\n\r\n        // エンコーダ値オーバーフロー対応\r\n        if (this.bodyInfo.EncoderValue.LEFT - newEncoderL > 10000) {\r\n            this.bodyInfo.EncoderValue.LEFT = 0;\r\n        }\r\n        if (this.bodyInfo.EncoderValue.RIGHT - newEncoderR > 10000) {\r\n            this.bodyInfo.EncoderValue.RIGHT = 0;\r\n        }\r\n\r\n        this.calcCoordinates(this.storedEncoder.LEFT + newEncoderL, this.storedEncoder.RIGHT + newEncoderR);\r\n        this.bodyInfo.EncoderValue.LEFT = newEncoderL;\r\n        this.bodyInfo.EncoderValue.RIGHT = newEncoderR;\r\n\r\n        this.getSpeed();\r\n        this.getDriveDirectionAve();\r\n    }\r\n\r\n    calcCoordinates(newEncoderL, newEncoderR) {\r\n        let degMoter = new Array(SorotMotor.MOTOR_NUM);\r\n        let degNXT;\r\n        let direction;\r\n        let dir1;\r\n        let syahen;\r\n        let rad;\r\n        let newEncorder = new Array(SorotMotor.MOTOR_NUM);\r\n\r\n        // バックラッシュ補正初期化\r\n        newEncorder[SorotMotor.LEFT] = newEncoderL;\r\n        newEncorder[SorotMotor.RIGHT] = newEncoderR;\r\n        degMoter[SorotMotor.LEFT] = this.getMoterMoveDistance(this.beforeEncoderValue.LEFT, newEncoderL);\r\n        degMoter[SorotMotor.RIGHT] = this.getMoterMoveDistance(this.beforeEncoderValue.RIGHT, newEncoderR);\r\n        this.beforeEncoderValue.LEFT = newEncoderL;\r\n        this.beforeEncoderValue.RIGHT = newEncoderR;\r\n\r\n        // 移動なしの場合、処理なし\r\n        if (degMoter[SorotMotor.LEFT] === 0 && degMoter[SorotMotor.RIGHT] === 0) {\r\n            return;\r\n        }\r\n\r\n        // 走行体移動距離算出\r\n        degNXT = (degMoter[SorotMotor.LEFT] + degMoter[SorotMotor.RIGHT]) / 2;\r\n        this.coordinate.distance += degNXT * window.config.robot.scale;\r\n        \r\n        // 走行体走行方向[rad]算出\r\n        if (degMoter[SorotMotor.LEFT] !== degMoter[SorotMotor.RIGHT]) {\r\n            dir1 = (degMoter[SorotMotor.LEFT] - degMoter[SorotMotor.RIGHT]) / window.config.robot.wheel.interval;\r\n            direction = this.coordinate.driveDirection + dir1;\r\n\r\n            // radian最小値最大値オーバー補正\r\n            if (direction > (2 * Math.PI)) {\r\n                direction -= 2 * Math.PI;\r\n            } else if (direction < (-2 * Math.PI)) {\r\n                direction += 2 * Math.PI;\r\n            }\r\n\r\n            this.coordinate.driveDirection = direction;\r\n\r\n            // XY座標計算\r\n            syahen = (2 * degNXT / dir1 * Math.sin(dir1 / 2));\r\n            rad = -dir1 / 2 + this.coordinate.driveDirection;\r\n            this.coordinate.x -= syahen * Math.cos(rad);\r\n            this.coordinate.y += syahen * Math.sin(rad);\r\n        } else {\r\n            // XY座標計算\r\n            this.coordinate.x -= degNXT * Math.cos(this.coordinate.driveDirection);\r\n            this.coordinate.y += degNXT * Math.sin(this.coordinate.driveDirection);\r\n        }\r\n    }\r\n\r\n    getSpeed() {\r\n        let speedSumTmp = 0;\r\n\r\n        // 走行速度はmm/秒\r\n        this.speedBuf[this.spdSmplCnt] = (this.coordinate.distance - this.lastDistance) * 1000 / window.STATUSMONITOR.TASK_PERIOD;\r\n        this.spdSmplCnt++;\r\n        if (this.spdSmplCnt > window.config.robot.speed.sample_num - 1) {\r\n            this.spdSmplCnt = 0;\r\n        }\r\n\r\n        for (let i = 0; i < window.config.robot.speed.sample_num; i++) {\r\n            speedSumTmp += this.speedBuf[i];\r\n        }\r\n\r\n        this.bodyInfo.RunSpeed = speedSumTmp / window.config.robot.speed.sample_num;\r\n\r\n        // 回転速度はradian/秒\r\n        let wkPrm = (this.coordinate.driveDirection - this.lastDriveDirection) * 100;\r\n        if (wkPrm > 500 || wkPrm < -500) {\r\n            this.bodyInfo.TurnSpeed = (this.coordinate.driveDirection + (2 * Math.PI - this.lastDriveDirection)) * 100;\r\n        } else {\r\n            this.bodyInfo.TurnSpeed = (this.coordinate.driveDirection - this.lastDriveDirection) * 100;\r\n        }\r\n\r\n        this.lastDistance = this.coordinate.distance;\r\n        this.lastDriveDirection = this.coordinate.driveDirection;\r\n    }\r\n\r\n    getMoterMoveDistance(oldValue, newValue) {\r\n        let deg = newValue - oldValue; // モータ移動量\r\n        return deg * this.wheelTransParam; // 車輪移動距離 [deg] → [mm]\r\n    }\r\n\r\n    getDriveDirectionAve() {\r\n        let distanceFromPrevious = this.coordinate.distance - this.distanceDriveDirectionAry[this.driveDirectionIdx % this.drive_direction_cnt];\r\n\r\n        if (distanceFromPrevious > 3) {\r\n            if ((this.driveDirectionIdx % this.drive_direction_cnt) === 0) {\r\n                this.coordinate.driveDirectionAveLast = this.coordinate.driveDirectionAve;\r\n            }\r\n            this.driveDirectionIdx++;\r\n            this.distanceDriveDirectionAry[this.driveDirectionIdx % this.drive_direction_cnt] = this.coordinate.distance;\r\n            this.driveDirectionAry[this.driveDirectionIdx % this.drive_direction_cnt] = this.coordinate.driveDirection;\r\n            this.coordinate.driveDirectionAve = this.dAverage(this.driveDirectionAry, this.drive_direction_cnt);\r\n        }\r\n    }\r\n\r\n    dAverage(ary, numAry) {\r\n        let d = 0;\r\n        for (let cnt = 0; cnt < numAry; cnt++) {\r\n            d += ary[cnt];\r\n        }\r\n        return d / numAry;\r\n    }\r\n\r\n\tgetBodyInfo() { return this.bodyInfo; }\r\n\r\n\tgetCoordinateInfo() { return this.coordinate; }\r\n\r\n    /**\r\n     * 座標情報補正\r\n     *\r\n     * @param coordCorrectInfo 補正情報\r\n     **/\r\n    correctCoordinateInfo(coordCorrectInfo)\r\n    {\r\n        if((coordCorrectInfo.ACAF & 0x01) === 0x01)\t//x補正\r\n            this.coordinate.x = coordCorrectInfo.CAPX;\r\n\r\n        if((coordCorrectInfo.ACAF & 0x02) === 0x02)\t//y補正\r\n            this.coordinate.y = coordCorrectInfo.CAPY;\r\n\r\n        if((coordCorrectInfo.ACAF & 0x04) === 0x04)\t//driveDirection補正\r\n            this.coordinate.driveDirection = (coordCorrectInfo.CAPR * Math.PI / 180); // DEG()は度をラジアンに変換\r\n    }\r\n\r\n    /**\r\n     * 超音波センサ有効無効スイッチ\r\n     **/\r\n    setSonarSwitch(on_off) {\r\n        // 超音波スイッチOFF＆超音波値リセット\r\n        this.bodyInfo.sonarOn = on_off;\r\n        this.bodyInfo.SonarValue = 0;\r\n        \r\n        // 衝立検知フラグリセット\r\n        this.coordinate.IsObstacle = false;\r\n        // this.relCoordinateInfo.IsObstacle = false;\r\n    }\r\n}\r\n","// import CommandDispatcher from './CommandDispatcher.js';\r\nimport { ScenarioControl } from './ScenarioControl.js';\r\nimport { StatusMonitor } from './StatusMonitor.js';\r\nimport { SorotMotor } from '../Sensor/SorotMotor.js';\r\nimport { ColorMonitor } from '../Sensor/ColorMonitor.js';\r\nimport { Message } from './Message.js';\r\nimport { SorotTask } from './SorotTask.js';\r\nimport { HWMonitor } from '../Sensor/HWMonitor.js';\r\n\r\nconst LeftMotor = \"leftPower\";\r\nconst RightMotor = \"rightPower\";\r\n\r\nexport class Sorot extends SorotTask {\r\n  static Initial = 0;      // 初期状態\r\n  static Idle = 1;         // アイドル状態（Bluetooth接続済）\r\n  static Downloaded = 2;   // シナリオダウンロード済状態（キャリブレーション開始前）\r\n  static Calibrating = 3;  // キャリブレーション中\r\n  static Ready = 4;        // 走行可能状態（キャリブレーション完了）\r\n  static Running = 5;      // 走行中\r\n  static Goal = 6;         // 走行完了\r\n  static Retire = 7;       // リタイア\r\n\r\n  // static instance = new Sorot(1);\r\n\r\n  static mLCD = {}; // Placeholder\r\n  static mArmMotor;\r\n  static mRightMotor;\r\n  static mLeftMotor;\r\n  static mColorMonitor = new ColorMonitor('C');\r\n  static mHWMonitor;\r\n  // static mCalibration = new Calibration();\r\n  static mStatus;\r\n\r\n  constructor(taskId) {\r\n    super();\r\n    this.taskId = taskId;\r\n    this.isSonarTarget = false;\r\n    Sorot.mStatus = Sorot.Initial;\r\n    Sorot.mArmMotor = new SorotMotor('c');\r\n    Sorot.mRightMotor = new SorotMotor(RightMotor);\r\n    Sorot.mLeftMotor = new SorotMotor(LeftMotor);\r\n    Sorot.mHWMonitor = new HWMonitor(Sorot.mLeftMotor, Sorot.mRightMotor);\r\n    window.COLORMONITOR = Sorot.getColorMonitor();\r\n    window.HWMONITOR = Sorot.getHWMonitor();\r\n    window.STATUSMONITOR = StatusMonitor.getInstance();\r\n    window.ARMMOTOR = Sorot.getArmMotor();\r\n    window.RIGHTMOTOR = Sorot.getRightMotor();\r\n    window.LEFTMOTOR = Sorot.getLeftMotor();\r\n  }\r\n\r\n  async run() {\r\n    let bStart = false;\r\n    console.log('wait sorot getMessage');\r\n\r\n    let rcvMsg;\r\n    while (true) {\r\n      rcvMsg = this.getMessage();\r\n      if (rcvMsg == null) {\r\n        await new Promise(resolve => setTimeout(resolve, 4));\r\n        continue;\r\n      } \r\n      console.log(`SorotRcv: ${rcvMsg.getId()}`);\r\n\r\n      switch (rcvMsg.getId()) {\r\n        case Message.CMD_INIT:\r\n          console.log('Message.CMD_INIT');\r\n          this.setStatus(Sorot.Idle);\r\n          // CommandDispatcher.sendResponse(rcvMsg, Message.ERR_OK);\r\n          break;\r\n        case Message.CMD_SET_SOROTINFO:\r\n          console.log(`Message.CMD_SET_SOROTINFO`);\r\n          this.setRunControlParam(rcvMsg);\r\n          break;\r\n        case Message.CMD_SET_INDIVIDUAL:\r\n          console.log(`Message.CMD_SET_INDIVIDUAL`);\r\n          this.setIndividualParam(rcvMsg);\r\n          break;\r\n        case Message.CMD_START_CALIB:\r\n          console.log(`Message.CMD_START_CALIB`);\r\n          await this.doCalibration(rcvMsg);\r\n          this.getCalibrationInfo(rcvMsg);\r\n          this.setStatus(Sorot.Ready);\r\n          break;\r\n        case Message.CMD_GET_CALIBINFO:\r\n          console.log(`Message.CMD_GET_CALIBINFO`);\r\n          this.getCalibrationInfo(rcvMsg);\r\n          break;\r\n        case Message.CMD_START:\r\n          console.log(`Message.CMD_START`);\r\n          this.setStatus(Sorot.Running);\r\n          this.startRun(rcvMsg);\r\n          bStart = true;\r\n          break;\r\n        default:\r\n          // CommandDispatcher.sendResponse(rcvMsg, Message.ERR_OK, new Uint8Array([...'TEST'].map(c => c.charCodeAt(0))));\r\n          break;\r\n      }\r\n\r\n      // Cleanup\r\n      rcvMsg = null;\r\n      if (bStart) break;\r\n    }\r\n  }\r\n\r\n  initialize() {\r\n    window.STATUSMONITOR;\r\n\r\n    Sorot.mArmMotor.setPWM(30);\r\n    setTimeout(() => {\r\n      Sorot.mArmMotor.setPWM(0);\r\n      Sorot.mArmMotor.reset();\r\n    }, 600);\r\n    // const CMDGRP_SYSTEM = 0x01;\r\n    // CommandDispatcher.registerMessageQueue(CMDGRP_SYSTEM, this);\r\n    // ScenarioControl.start();\r\n    // CommandDispatcher.start();\r\n  }\r\n\r\n  async doCalibration(rcvMsg) {\r\n    // CommandDispatcher.sendResponse(rcvMsg, Message.ERR_OK);\r\n    window.RUNCONTROL.ArmOnly = true;\r\n    window.RUNCONTROL.start();\r\n\r\n    console.log('START CALIB');\r\n    // window.CALIBRATION.execute();\r\n\r\n    // this.mCalInfo = window.CALIBRATION.getCalibrationInfo();\r\n    const black = gBlack;\r\n    const white = gWhite;\r\n    console.log(gBlack)\r\n    const gray = Math.floor((black + white) / 2);\r\n    this.mCalInfo = {\r\n      mCalBlack: black,\r\n      mCalGray: gray,\r\n      mCalWhite: white,\r\n      mGyroOffset: 0\r\n    };\r\n    window.RUNCONTROL.setCalibrationInfo(this.mCalInfo);\r\n    window.NAVIGATOR.setCalibrationInfo(this.mCalInfo);\r\n\r\n    const sndMsg = new Message(rcvMsg.getId(), rcvMsg.getData(), rcvMsg.getDataLength());\r\n    window.SCENARIOCONTROL.sendMessage(sndMsg);\r\n  }\r\n\r\n  getCalibrationInfo(rcvMsg) {\r\n    // CommandDispatcher.sendResponse(\r\n    //   rcvMsg,\r\n    //   Message.ERR_OK,\r\n    //   window.CALIBRATION.getCalibrationInfo(),\r\n    // );\r\n  }\r\n\r\n  startRun(rcvMsg) {\r\n    const sndMsg = new Message(rcvMsg.getId(), rcvMsg.getData(), rcvMsg.getDataLength());\r\n    window.STATUSMONITOR.start();\r\n    window.NAVIGATOR.start();\r\n    window.SCENARIOCONTROL.sendMessage(sndMsg);\r\n    // CommandDispatcher.sendResponse(rcvMsg, Message.ERR_OK);\r\n  }\r\n\r\n  setRunControlParam(rcvMsg) {\r\n    const data = rcvMsg.getData();\r\n    A_D = data.A_D;\r\n    A_R = data.A_R;\r\n    K_F = [data.K_F0, data.K_F1, data.K_F2, data.K_F3];\r\n    K_I = data.K_I;\r\n    K_PHIDOT = data.K_PHIDOT;\r\n    K_THETADOT = data.K_THETADOT;\r\n  }\r\n\r\n  setIndividualParam(rcvMsg) {\r\n    // Not implemented\r\n  }\r\n\r\n  setStatus(status) {\r\n    Sorot.mStatus = status;\r\n  }\r\n\r\n  getStatus() {\r\n     return Sorot.mStatus;\r\n  }\r\n\r\n  static getColorMonitor()\t{\r\n    return Sorot.mColorMonitor;\r\n  }\r\n\r\n  static getArmMotor() {\r\n    return Sorot.mArmMotor;\r\n  }\r\n  static getRightMotor() {\r\n    return Sorot.mRightMotor;\r\n  }\r\n  static getLeftMotor() {\r\n    return Sorot.mLeftMotor;\r\n  }\r\n  static getHWMonitor() {\r\n    return Sorot.mHWMonitor;\r\n  }\r\n  static getCalibration()\t{\r\n    // return Sorot.mCalibration;\r\n  }\r\n  peekMessage() {\r\n      return super.peekMessage();\r\n  }\r\n  getMessage() {\r\n      return super.getMessage();\r\n  }\r\n  sendMessage(message) {\r\n      super.sendMessage(message);\r\n  }\r\n}\r\n","export class SwitchMethod {\r\n    static JS_CONTINUE = 0;\r\n    static JS_LOST = 1;\r\n    static JS_NEXT = 2;\r\n\tstatic JS_RETURN = 3;\r\n    \r\n    constructor() {\r\n        this.m_LostCnt = 0; // 適切な初期値を設定してください\r\n        this.m_pCaribInfo;\r\n    }\r\n\r\n    // 失ったかどうかを判定する\r\n    IsLost() {\r\n        // return (ColorInfo.whiteCnt > this.m_LostCnt) ? true : false;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 状態を判定する\r\n     * \r\n     * @return 状態\r\n     **/\r\n    GetStatus() {\r\n        let status = SwitchMethod.JS_CONTINUE;\r\n\r\n        // 失ったかどうかを判定\r\n        if (this.IsLost()) {\r\n            status = SwitchMethod.JS_LOST;\r\n        } else {\r\n            // 状態が変わったかどうかを判定\r\n            if (this.IsChange()) {\r\n                status = SwitchMethod.JS_NEXT;\r\n            }\r\n        }\r\n        return status;\r\n    }\r\n\r\n    IsChange() {\r\n        return false; // 仮の実装\r\n    }\r\n    \r\n    SetCaribrationInfo(calibInfo) {\r\n         this.m_pCaribInfo = calibInfo; \r\n    }\r\n}\r\n\r\nexport default SwitchMethod;\r\n","import { SwitchMethod } from './SwitchMethod.js';\r\n\r\nif (typeof window === 'undefined') global.window = global;\r\n\r\nexport class TimeASM extends SwitchMethod {\r\n    // static pre_now = 0;\r\n\r\n    constructor() {\r\n        super();\r\n        this.m_PassageTime = 0;\r\n        this.m_startTime = Date.now(); // 基準となる開始時刻を記録\r\n        this.m_clock = {\r\n            now: () => Date.now() - this.m_startTime, // 開始時刻からの経過時間を返す\r\n            reset: () => { this.m_startTime = Date.now(); } // 現在時刻を新たな開始時刻として設定し、カウントをリセット\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 状態が変わったかどうかを判定する\r\n     * \r\n     * @return 状態が変わったかどうか\r\n     **/\r\n    IsChange() {\r\n        const ret = (this.m_clock.now() > this.m_PassageTime);\r\n        // update static pre_now for potential logging without using undefined globals\r\n        // TimeASM.pre_now = 0;\r\n        // const now = Math.floor(Date.now() / 1000);\r\n        // if(TimeASM.pre_now !== now) {\r\n        //     console.log(now);\r\n        // }\r\n        // TimeASM.pre_now = now;\r\n\r\n        return ret;\r\n    }\r\n\r\n    Init(commandSet) {\r\n        this.m_PassageTime = commandSet.SwitchInfo.SCT;\r\n        // this.m_clock.reset();\r\n    }\r\n    setCalibrationInfo(calibInfo) {\r\n        super.setCalibrationInfo(calibInfo);\r\n    }\r\n    GetStatus(){\r\n        return super.GetStatus();\r\n    }\r\n}\r\nexport default TimeASM;\r\n","import SwitchMethod from './SwitchMethod.js';\r\n\r\nif (typeof window === 'undefined') global.window = global;\r\n\r\nexport class VarASM extends SwitchMethod {\r\n    constructor() {\r\n        super();\r\n        this.m_VarType = 0; // 初期値を設定\r\n    }\r\n\r\n    /**\r\n     * 状態が変わったかどうかを判定する\r\n     * 0: TRUE, 1: スイッチフラグ\r\n     * \r\n     * @return 状態が変わったかどうか\r\n     **/\r\n    IsChange() {\r\n        let ret = false;\r\n        switch (this.m_VarType) {\r\n            case 0: // TRUE\r\n                ret = true;\r\n                break;\r\n            case 1: // スイッチフラグ\r\n                // ret = window.SOROT.getIsSonarTarget();\r\n                ret = window.SOROT.getIsSwitchFlg();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    Init(commandSet) {\r\n        this.m_VarType = commandSet.SwitchInfo.SCV;\r\n    }\r\n    setCalibrationInfo(calibInfo) {\r\n        super.setCalibrationInfo(calibInfo);\r\n    }\r\n    GetStatus(){\r\n        return super.GetStatus();\r\n    }\r\n}\r\nexport default VarASM;\r\n","import {SwitchMethod} from './SwitchMethod.js';\r\n\r\nif (typeof window === 'undefined') global.window = global;\r\n\r\nexport class ColorASM extends SwitchMethod {\r\n    constructor() {\r\n        super();\r\n        this.m_naname = false;\r\n        this.m_targetColor = null;\r\n    }\r\n\r\n    /**\r\n     * 状態が変わったかどうかを判定する\r\n     * \r\n     * @return 状態が変わったかどうか\r\n     **/\r\n    IsChange() {\r\n        const color = this.getColorInfo();\r\n        \r\n        // console.log(`color:${color.color}  target:${this.m_targetColor}`);\r\n        // TODO 状態が変わったかどうかのロジックを実装する\r\n        return (color.color === this.m_targetColor);\r\n    }\r\n\r\n    Init(commandSet) {\r\n        this.m_naname = (commandSet.RunInfo.NOBLNCE === 1);\r\n        this.m_targetColor = commandSet.SwitchInfo.SCC;\r\n    }\r\n\r\n    getColorInfo() {\r\n        // STATUSMONITORから色情報を取得するロジックを実装する必要があります\r\n        const colorInfo = {};\r\n        window.STATUSMONITOR.getColorInfo(colorInfo);\r\n        return colorInfo;\r\n    }\r\n    setCalibrationInfo(calibInfo) {\r\n        super.setCalibrationInfo(calibInfo);\r\n    }\r\n    GetStatus(){\r\n        return super.GetStatus();\r\n    }\r\n}\r\nexport default ColorASM;\r\n","import {SwitchMethod} from './SwitchMethod.js';\r\nimport { LOG_TRACE, LOG_DBG, LOG_INF, LOG_WARN, LOG_ERRORS, LOG_CRITICAL } from '../Utillity/logger.js';\r\n\r\nif (typeof window === 'undefined') global.window = global;\r\n\r\nexport class DirASM extends SwitchMethod{\r\n    constructor() {\r\n        super();\r\n        this.m_PreDiff = 0;\r\n        this.m_TargetDir = 0;\r\n    }\r\n\r\n    /**\r\n     * 状態が変わったかどうかを判定する\r\n     * \r\n     * @return 状態が変わったかどうか\r\n     **/\r\n    IsChange() {\r\n        let p_Diff; // 差分\r\n        const coordinate = {};\r\n        window.STATUSMONITOR.getCoordinateInfo(coordinate);\r\n        p_Diff = this.m_TargetDir - coordinate.driveDirection;\r\n\r\n        const ret = (this.m_PreDiff * p_Diff) <= 0;\r\n\r\n        this.m_PreDiff = p_Diff;\r\n\r\n        return ret;\r\n    }\r\n\r\n    Init(commandSet) {\r\n        const coordinate = {};\r\n        window.STATUSMONITOR.getCoordinateInfo(coordinate);\r\n        this.m_TargetDir = commandSet.SwitchInfo.SCR * (Math.PI / 180) + coordinate.driveDirection;\r\n        this.m_PreDiff = this.m_TargetDir - coordinate.driveDirection;\r\n    }\r\n\r\n    setCalibrationInfo(calibInfo) {\r\n        super.setCalibrationInfo(calibInfo);\r\n    }\r\n    GetStatus(){\r\n        return super.GetStatus();\r\n    }\r\n}\r\nexport default DirASM;\r\n","import {SwitchMethod} from './SwitchMethod.js';\r\n\r\nif (typeof window === 'undefined') global.window = global;\r\n\r\nexport class DistanceASM extends SwitchMethod{\r\n    constructor() {\r\n      super();\r\n      this.m_startDistance = 0;\r\n      this.preDistance = 0;\r\n      this.m_distance = 0;\r\n    }\r\n  \r\n    Init(commandSet) {\r\n      const coordinate = {};\r\n      window.STATUSMONITOR.getCoordinateInfo(coordinate);\r\n      this.m_startDistance = coordinate.distance;\r\n      this.preDistance = 0;\r\n      this.m_distance = commandSet.SwitchInfo.SCD;\r\n    }\r\n  \r\n    IsChange() {\r\n      const coordinate = {};\r\n      window.STATUSMONITOR.getCoordinateInfo(coordinate);\r\n      const distance = coordinate.distance - this.m_startDistance;\r\n      let ret = false;\r\n  \r\n      if (this.m_distance > 0) {\r\n        if (distance > this.m_distance) {\r\n          ret = true;\r\n        }\r\n      } else if (this.m_distance < 0) {\r\n        if (distance < this.m_distance) {\r\n          ret = true;\r\n        }\r\n      } else {\r\n        if ((this.preDistance > 0 && distance <= 0) ||\r\n            (this.preDistance < 0 && distance >= 0)) {\r\n          ret = true;\r\n        }\r\n      }\r\n  \r\n      this.preDistance = distance;\r\n      return ret;\r\n    }\r\n    setCalibrationInfo(calibInfo) {\r\n        super.SetCaribrationInfo(calibInfo);\r\n    }\r\n    GetStatus(){\r\n        return super.GetStatus();\r\n    }\r\n  }\r\n  ","// Navigator.js\r\n// JavaScript implementation of Navigator class from C++\r\n\r\nimport { SorotTask } from './SorotTask.js';\r\nimport { Sorot } from './Sorot.js';\r\nimport { StatusMonitor } from './StatusMonitor.js';\r\nimport { ScenarioControl } from './ScenarioControl.js';\r\nimport { Message } from './Message.js';\r\nimport { SwitchMethod } from '../SwitchMethod/SwitchMethod.js';\r\n\r\nimport { TimeASM } from '../SwitchMethod/TimeASM.js';\r\nimport { VarASM } from '../SwitchMethod/VarASM.js';\r\nimport { ColorASM } from '../SwitchMethod/ColorASM.js';\r\nimport { DirASM } from '../SwitchMethod/DirASM.js';\r\nimport { DistanceASM } from '../SwitchMethod/DistanceASM.js';\r\nimport { LOG_TRACE, LOG_DBG, LOG_INF, LOG_WARN, LOG_ERRORS, LOG_CRITICAL } from '../Utillity/logger.js';\r\n\r\nexport class Navigator extends SorotTask {\r\n  static SW_TIMER\t\t= 0x0001;\r\n  static SW_VAR\t\t\t= 0x0002;\r\n  static SW_X\t\t\t  = 0x0004;\r\n  static SW_Y\t\t\t  = 0x0008;\r\n  static SW_COLOR\t\t= 0x0010;\r\n  static SW_DIR\t\t\t= 0x0020;\r\n  static SW_STAIR\t\t= 0x0040;\r\n  static SW_DISTANCE\t= 0x0080;\r\n  static SW_STOP\t\t\t= 0x0100;\r\n  static SW_SYNC\t\t\t= 0x0200;\r\n  static mSingleton = null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.taskPriority = 3;\r\n    this.mIsWaitChange = false;\r\n    this.m_CommandSet = {};\r\n    this.m_calibInfo = {};\r\n    this.m_switchMethodTbl = [\r\n      { bit : Navigator.SW_TIMER, switchMethod : new TimeASM() },\r\n      { bit : Navigator.SW_VAR, switchMethod : new VarASM() },\r\n      { bit : Navigator.SW_COLOR, switchMethod : new ColorASM() },\r\n      { bit : Navigator.SW_DIR, switchMethod : new DirASM() },\r\n      { bit : Navigator.SW_DISTANCE, switchMethod : new DistanceASM() },\r\n    ];\r\n  }\r\n\r\n  static getInstance() {\r\n    if (!Navigator.mSingleton) {\r\n      Navigator.mSingleton = new Navigator();\r\n    }\r\n    return Navigator.mSingleton;\r\n  }\r\n\r\n  setCalibrationInfo(calibInfo) {\r\n    this.m_calibInfo = calibInfo;\r\n  }\r\n\r\n  start() {\r\n    LOG_TRACE('Navi start');\r\n    // Implement task scheduling if needed\r\n  }\r\n\r\n  run() {\r\n    LOG_TRACE('Navi run');\r\n    const rcvMsg = this.peekMessage();\r\n    if (rcvMsg) {\r\n      if (rcvMsg.getId() === Message.CMD_CHANGE_SCENARIO) {\r\n        this.m_CommandSet = rcvMsg.getData();\r\n        this.changeSwitchMethod();\r\n        this.mIsWaitChange = false;\r\n      }\r\n    }\r\n\r\n    if (window.SOROT.getStatus() === Sorot.Running) {\r\n      this.navigatorRun();\r\n    }\r\n  }\r\n\r\n  changeSwitchMethod() {\r\n    if (this.m_CommandSet.SNO !== 'END_SCENARIO') {\r\n      for (const entry of this.m_switchMethodTbl) {\r\n        if (this.m_CommandSet.SwitchInfo.SCJFN & entry.bit) {\r\n          entry.switchMethod.Init(this.m_CommandSet);\r\n          entry.switchMethod.SetCaribrationInfo(this.m_calibInfo);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  navigatorRun() {\r\n    let changeType = 1;\r\n    let sno = 0;\r\n    let cno = 0;\r\n\r\n    let status = SwitchMethod.JS_CONTINUE;\r\n    for (const entry of this.m_switchMethodTbl) {\r\n      if (this.m_CommandSet.SwitchInfo.SCJFN & entry.bit) {\r\n        status = entry.switchMethod.GetStatus();\r\n\r\n        if (entry.bit === SwitchMethod.SW_VAR) {\r\n          if (status === SwitchMethod.JS_NEXT) {\r\n            changeType = 2;\r\n            sno = this.m_CommandSet.SwitchInfo.JMPSNO;\r\n            cno = 1;\r\n          }\r\n          status = SwitchMethod.JS_NEXT;\r\n          break;\r\n        }\r\n\r\n        if (status !== SwitchMethod.JS_CONTINUE) break;\r\n      }\r\n    }\r\n\r\n    if (this.m_CommandSet.RunInfo.SONAR) {\r\n      let bodyInfo;\r\n      window.STATUSMONITOR.getBodyInfo(bodyInfo);\r\n      if (bodyInfo.SonarTarget?.isFound) {\r\n        Sorot.setIsSonarTarget(true);\r\n        status = SwitchMethod.JS_NEXT;\r\n      }\r\n    }\r\n\r\n    switch (status) {\r\n      case SwitchMethod.JS_CONTINUE:\r\n        break;\r\n      case SwitchMethod.JS_NEXT:\r\n        if (!this.mIsWaitChange) {\r\n          const data = [changeType, sno, cno];\r\n          const sndMsg = new Message(Message.CMD_CHANGE_SCENARIO, data);\r\n          console.log('SCENARIOCONTROL->sendMessage');\r\n          window.SCENARIOCONTROL.sendMessage(sndMsg);\r\n          this.mIsWaitChange = true;\r\n        }\r\n        break;\r\n      case SwitchMethod.JS_LOST:\r\n        break;\r\n      case SwitchMethod.JS_RETURN:\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    // Cancel scheduled task if implemented\r\n  }\r\n\r\n  peekMessage() {\r\n      return super.peekMessage();\r\n  }\r\n  getMessage() {\r\n      return super.getMessage();\r\n  }\r\n  sendMessage(message) {\r\n      super.sendMessage(message);\r\n  }\r\n}\r\n\r\nwindow.NAVIGATOR = Navigator.getInstance();","///////////////////////////////////////////////////////////\r\n//  RunMethod.js\r\n//  Implementation of the Class RunMethod\r\n//  Created on:      16-8-2011 14:43:15\r\n//  Original author: fcsk\r\n///////////////////////////////////////////////////////////\r\n\r\nexport class RunParameter {\r\n    constructor(forward = 0, turn = 0) {\r\n        this.forward = forward;\r\n        this.turn = turn;\r\n    }\r\n}\r\n\r\n// 走行関数\r\nconst RunMethodType = {\r\n    LEFT_EDGE_PID: 1,    // 左エッジPID走行\r\n    RIGHT_EDGE_PID: 2,   // 右エッジPID走行\r\n    REVOLUTION: 3,       // その場で回転\r\n    STRAIGHT: 4,         // 倒立走行(FwdとTurnはそのままAPIに渡す)\r\n    LINEAR: 5,           // 倒立走行(エンコーダ値による走行方向補正あり)\r\n    LINEAR_SPDADJ: 6,    // 速度一定制御\r\n    PHOTO: 7,            // 撮影\r\n    PHOTO_MULT: 8,       // 撮影（複数）\r\n    // LTOR_EDGE,         // 左→右エッジチェンジ\r\n    // RTOL_EDGE,         // 右→左エッジチェンジ\r\n    // MARKER_L_EDGE,     // マーカ区間用左エッジPID走行\r\n    // MARKER_R_EDGE,     // マーカ区間用右エッジPID走行\r\n    // ARC,               // 円弧走行\r\n    // NEOREVOLUTION,     // その場で回転・改\r\n    // STOP,              // 停止(エンコーダ値による停止位置補正あり)\r\n    // GYROSTOP,          // 停止(ジャイロオフセット値調整)\r\n    // MIRACLE,           // 奇跡走行\r\n    // X_LINE,            // X座標走行\r\n    // Y_LINE             // Y座標走行\r\n};\r\n\r\n/**\r\n * 走行方法取得クラス\r\n * @author fcsk\r\n * @version 1.0\r\n * @created 16-8-2011 14:33:07\r\n */\r\nexport class RunMethod {\r\n    constructor() {}\r\n\r\n    reset() {}\r\n\r\n    getRunParameter(calibrationInfo, RunInfo) {\r\n        if (isNaN(RunInfo.FWD)) {\r\n            RunInfo.FWD = 0;\r\n        }\r\n        if (isNaN(RunInfo.TRN)) {\r\n            RunInfo.TRN = 0;\r\n        }\r\n        return new RunParameter(RunInfo.FWD, RunInfo.TRN); // just standing up\r\n    }\r\n}\r\n","import { RunMethod } from './RunMethod.js';\r\n\r\nif (typeof window === 'undefined') global.window = global;\r\n\r\nexport class EdgePidRunning extends RunMethod{\r\n    constructor(edge) {\r\n      super();\r\n      this.mEdge = edge;\r\n      this.m_IntegVal = 0;\r\n    }\r\n\r\n  \r\n    reset() {\r\n      // 積分値はクリアしないほうがなめらかに走る\r\n    }\r\n  \r\n    getRunParameter(calibrationInfo, runInfo) {\r\n      const runParam = {\r\n        forward: runInfo.FWD,\r\n        turn: 0,\r\n      };\r\n  \r\n      let colorInfo = {};\r\n      window.STATUSMONITOR.getColorInfo(colorInfo);\r\n\r\n      if (colorInfo.ColorSensorValue > 750) {\r\n        return { forward: 0, turn: 0 };\r\n      }\r\n  \r\n      const proportional = this.getProportional(runInfo.KP, calibrationInfo, colorInfo, runInfo);\r\n      const integral = this.getIntegral(runInfo.KI, proportional, colorInfo, runInfo);\r\n      const differential = this.getDifferential(runInfo.KD, calibrationInfo, colorInfo, runInfo);\r\n  \r\n      let turn = proportional + integral + differential;\r\n      turn = Math.max(-100, Math.min(100, turn));\r\n      runParam.turn = (runParam.forward === 0) ? 0 : turn;\r\n  \r\n      return runParam;\r\n    }\r\n  \r\n    getProportional(gain, calibrationInfo, colorInfo, RunInfo) {\r\n      const kp = gain;\r\n      const black = this.getLineColor(calibrationInfo);\r\n      const white = this.getOutColor(calibrationInfo);\r\n      const threshold = this.getThresholdOfTargetColor(black, white, RunInfo.WPER);\r\n      const diff = (black - white) || 1;\r\n      const light = colorInfo.ColorSensorValue;\r\n      const deviation = (this.mEdge === 'LEFT') ? threshold - light : light - threshold;\r\n  \r\n      let output = kp * deviation * 10.0 / diff;\r\n      return Math.max(-100, Math.min(100, output));\r\n    }\r\n  \r\n    getThresholdOfTargetColor(black, white, percentage) {\r\n      return (black + white) / 2 - ((black - white) * percentage / 100);\r\n    }\r\n  \r\n    getIntegral(gain, proportional, colorInfo, RunInfo) {\r\n      const ki = gain;\r\n  \r\n      if (RunInfo.NOBLNCE) {\r\n        let tmp = ki * proportional / 1000.0 + this.m_IntegVal;\r\n        const total = proportional + this.m_IntegVal;\r\n  \r\n        if (total > 100) tmp = Math.max(0, 100 - proportional);\r\n        else if (total < -100) tmp = Math.min(0, -100 - proportional);\r\n  \r\n        this.m_IntegVal = Math.max(-100, Math.min(100, tmp));\r\n        return this.m_IntegVal;\r\n      } else {\r\n        let integral = (colorInfo.diffSumChangeRateAryLast - colorInfo.diffSumChangeRateAry) / 2.0 * 0.004;\r\n        if (this.mEdge !== 'LEFT') integral = -integral;\r\n        return ki * integral / 10.0;\r\n      }\r\n    }\r\n  \r\n    getDifferential(gain, calibrationInfo, colorInfo, RunInfo) {\r\n      const kd = gain;\r\n      const diff = this.getLineColor(calibrationInfo) - this.getOutColor(calibrationInfo) || 1;\r\n      let deviation = colorInfo.diffSumChangeRateAry;\r\n      if (this.mEdge !== 'LEFT') deviation = -deviation;\r\n      return kd * deviation * 10.0 / diff;\r\n    }\r\n  \r\n    getLineColor(calibrationInfo) {\r\n      return calibrationInfo.mCalBlack;\r\n    }\r\n  \r\n    getOutColor(calibrationInfo) {\r\n      return calibrationInfo.mCalWhite;\r\n    }\r\n  }\r\n\r\nexport default EdgePidRunning;\r\n  ","import { RunMethod } from './RunMethod.js';\r\n\r\nif (typeof window === 'undefined') global.window = global;\r\n\r\nexport class LinearRunning extends RunMethod{\r\n    constructor() {\r\n      super();\r\n      this.mHasPreDiff = false;\r\n      this.mBodyInfo = { EncoderValue: { LEFT: 0, RIGHT: 0 }, \r\n      sonarOn: 0, \r\n      GyroSenserValue: 0, \r\n      SonarValue: 0, \r\n      SonarTarget: { isFound: false }, \r\n      BattyValue: 0, \r\n      TurnSpeed: 0, \r\n      RunSpeed: 0 };\r\n    }\r\n    getRunParameter(calibrationInfo, RunInfo) {\r\n      const MOTOR_NUM = 2;\r\n      let thisBodyInfo = {};\r\n  \r\n      const runParam = {\r\n        forward: RunInfo.FWD,\r\n        turn: 0,\r\n      };\r\n  \r\n      window.STATUSMONITOR.getBodyInfo(thisBodyInfo);\r\n      const diffEncoderValue = [0, 0];\r\n      let turnTmp = RunInfo.TRN;\r\n  \r\n      if (!this.mHasPreDiff) {\r\n        this.mBodyInfo.EncoderValue['LEFT'] = thisBodyInfo.EncoderValue['LEFT'];\r\n        this.mBodyInfo.EncoderValue['RIGHT'] = thisBodyInfo.EncoderValue['RIGHT'];\r\n        this.mHasPreDiff = true;\r\n      }\r\n  \r\n      diffEncoderValue['LEFT'] = thisBodyInfo.EncoderValue['LEFT'] - this.mBodyInfo.EncoderValue['LEFT'];\r\n      diffEncoderValue['RIGHT'] = thisBodyInfo.EncoderValue['RIGHT'] - this.mBodyInfo.EncoderValue['RIGHT'];\r\n  \r\n      if (turnTmp !== 0) {\r\n        if (turnTmp > 0) {\r\n          // 右カーブ補正\r\n          diffEncoderValue['RIGHT'] = Math.floor(diffEncoderValue['RIGHT'] * (1 + turnTmp / 100));\r\n        } else {\r\n          // 左カーブ補正\r\n          diffEncoderValue['LEFT'] = Math.floor(diffEncoderValue['LEFT'] * (1 + (-turnTmp / 100)));\r\n        }\r\n      }\r\n  \r\n      const diffEncoderValueRL = diffEncoderValue['RIGHT'] - diffEncoderValue['LEFT'];\r\n      turnTmp += diffEncoderValueRL;\r\n  \r\n      runParam.turn = Math.max(-100, Math.min(100, turnTmp));\r\n  \r\n      return runParam;\r\n    }\r\n  }\r\n\r\nexport default LinearRunning;\r\n  ","import { RunMethod, RunParameter } from './RunMethod.js';\r\n\r\nif (typeof window === 'undefined') global.window = global;\r\n\r\nexport class RevolutionRunning extends RunMethod {\r\n    constructor() {\r\n        super();\r\n        this.mTurn = 0;\r\n        this.mCount = 0;\r\n    }\r\n\r\n    getRunParameter(calibrationInfo, RunInfo) {\r\n        // turnの増減(-1)と減少(+1)\r\n        if (RunInfo.TRN > 0) {\r\n            if (this.mTurn < RunInfo.TRN) {\r\n                this.mTurn += (this.mCount++ % 3 === 0 ? 1 : 0);\r\n            }\r\n        } else {\r\n            if (this.mTurn > RunInfo.TRN) {\r\n                this.mTurn -= (this.mCount++ % 3 === 0 ? 1 : 0);\r\n            }\r\n        }\r\n        return new RunParameter(RunInfo.FWD, this.mTurn);\r\n    }\r\n\r\n    reset() {\r\n        this.mTurn = 0;\r\n        this.mCount = 0;\r\n    }\r\n}\r\n\r\nexport default RevolutionRunning;\r\n","///////////////////////////////////////////////////////////\r\n//  RunMethodFactory.js\r\n//  Implementation of the Class RunMethodFactory\r\n//  Created on:      16-8-2011 14:43:15\r\n//  Original author: fcsk\r\n///////////////////////////////////////////////////////////\r\n\r\nconst LEFT_EDGE_PID = 1;    // 左エッジPID走行\r\nconst RIGHT_EDGE_PID = 2;   // 右エッジPID走行\r\nconst REVOLUTION = 3;       // その場で回転\r\nconst STRAIGHT = 4;         // 倒立走行(FwdとTurnはそのままAPIに渡す)\r\nconst LINEAR = 5;           // 倒立走行(エンコーダ値による走行方向補正あり)\r\nconst LINEAR_SPDADJ = 6;    // 速度一定制御\r\nconst PHOTO = 7;            // 撮影\r\nconst PHOTO_MULT = 8;       // 撮影（複数）\r\n\r\nimport { EdgePidRunning } from './EdgePidRunning.js';\r\nimport { LinearRunning } from './LinearRunning.js';\r\nimport { RevolutionRunning } from './RevolutionRunning.js';\r\n\r\nconst m_runMethodTbl = [\r\n    { type: LEFT_EDGE_PID, runMethod: new EdgePidRunning('LEFT') },  // 左エッジPID走行\r\n    { type: RIGHT_EDGE_PID, runMethod: new EdgePidRunning('RIGHT') }, // 右エッジPID走行\r\n    { type: REVOLUTION, runMethod: new RevolutionRunning() },         // その場で回転\r\n    // { RunMethodType.STRAIGHT: new RunMethod() },                 // 倒立走行(FwdとTurnはそのままAPIに渡す)\r\n    { type: LINEAR, runMethod: new LinearRunning() },                 // 倒立走行(エンコーダ値による走行方向補正あり)\r\n    // { type: RunMethodType.LINEAR_SPDADJ, runMethod: new LinearSpeedAdjustRunning() }, // 速度一定制御\r\n    // { type: PHOTO, runMethod: new TakePhoto(SINGLE) },\r\n    // { type: PHOTO_MULT, runMethod: new TakePhoto(MULT) },\r\n];\r\n\r\nexport class RunMethodFactory {\r\n\r\n    static factory(type) {\r\n        for (let i = 0; i < m_runMethodTbl.length; i++) {\r\n            if (type === m_runMethodTbl[i].type) {\r\n                return m_runMethodTbl[i].runMethod;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default RunMethodFactory;\r\n","// JavaScript版 RunControl クラス\r\n// EV3RTやTOPPERS/ATKのタスク機構はモック化しています\r\n\r\nimport { SorotTask } from './SorotTask.js';\r\n\r\nconst SEASOR_W = 0x01; // 速度追従姿勢制御ON\r\n\r\nimport { RunMethodFactory } from '../RunMethod/RunMethodFactory.js';\r\nimport { Message } from './Message.js';\r\nimport { LOG_TRACE, LOG_DBG, LOG_INF, LOG_WARN, LOG_ERRORS, LOG_CRITICAL } from '../Utillity/logger.js';\r\n\r\nexport class RunControl extends SorotTask {\r\n  static instance = null;\r\n\r\n  static getInstance() {\r\n    if (!RunControl.instance) {\r\n      RunControl.instance = new RunControl(window.LEFTMOTOR, window.RIGHTMOTOR, window.ARMMOTOR);\r\n    }\r\n    return RunControl.instance;\r\n  }\r\n\r\n  constructor(motorL, motorR, armMotor) {\r\n    super();\r\n    this.motorL = motorL;\r\n    this.motorR = motorR;\r\n    this.armMotor = armMotor;\r\n\r\n    this.runMethod = null;\r\n    this.msecCount = 0;\r\n\r\n    this.maxCount = 0;\r\n    this.gyroOffsetAdj2 = 0;\r\n    this.blnceGyro = 0;\r\n\r\n    this.preNoneBalancer = 0;\r\n    this.commandSet = { RunInfo: {} };\r\n    this.calibrationInfo = {};\r\n\r\n    this.armCount = 0;\r\n    this.preFwd = 0;\r\n    this.preTurn = 0;\r\n    this.pwmL = 0;\r\n    this.pwmR = 0;\r\n\r\n    this.armOnly = false;\r\n  }\r\n\r\n  // タスク開始（モック）\r\n  start() {\r\n    console.log('RunCtrl start');\r\n    // 実環境ではタイマーやアラームを設定\r\n  }\r\n\r\n  // メインループ\r\n  run() {\r\n    LOG_TRACE('RunCtrl run');\r\n    const rcvMsg = this.peekMessage();\r\n    if (rcvMsg) {\r\n      switch (rcvMsg.getId()) {\r\n        case Message.CMD_CHANGE_SCENARIO:\r\n          this.commandSet = rcvMsg.getData();\r\n          this.changeRunMethod();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    this.msecCount = this.msecCount === 0 ? 1 : 0;\r\n    if (!this.armOnly) this.controlRun();\r\n    this.controlArm();\r\n  }\r\n\r\n  changeRunMethod() {\r\n    window.formData.setValue('sno', this.commandSet.SNO);\r\n    window.formData.setValue('cno', this.commandSet.CNO);\r\n    window.formData.setValue('fwd', this.commandSet.RunInfo.FWD);\r\n    window.formData.setValue('trn', this.commandSet.RunInfo.TRN);\r\n    console.log(`changeRun: FUNCNO=${this.commandSet.RunInfo.FUNCNO} FWD=${this.commandSet.RunInfo.FWD}`);\r\n    this.runMethod = RunMethodFactory.factory(this.commandSet.RunInfo.FUNCNO);\r\n    if (this.runMethod) this.runMethod.reset();\r\n    this.armMotor.reset();\r\n    this.armCount = this.armMotor.getCount();\r\n  }\r\n\r\n  controlRun() {\r\n    if (!this.runMethod) {\r\n      console.log('RunMethod ERROR');\r\n      return;\r\n    }\r\n    const rp = this.runMethod.getRunParameter(this.calibrationInfo, this.commandSet.RunInfo);\r\n\r\n    // バランスON/NOBLNCE=0\r\n    if (this.commandSet.RunInfo.NOBLNCE === 0) {\r\n      if (this.preNoneBalancer === 1) {\r\n        window.STATUSMONITOR.resetMotor();\r\n      }\r\n      if (this.msecCount === 0) {\r\n        const bi = {}; \r\n        window.STATUSMONITOR.getBodyInfo(bi);\r\n        this.blnceGyro = this.calibrationInfo.gyroOffset + this.commandSet.RunInfo.GYOFST + this.gyroOffsetAdj2;\r\n        this.preFwd = rp.forward;\r\n        this.preTurn = rp.turn;\r\n      } else {\r\n        if (this.preFwd === rp.forward && this.preTurn !== 0) {\r\n          if (rp.forward === 0) {\r\n            this.pwmL = this.pwmL * rp.turn / this.preTurn;\r\n            this.pwmR = this.pwmR * rp.turn / this.preTurn;\r\n          } else {\r\n            const base = Math.abs(this.pwmL - this.pwmR) / 2;\r\n            const diff = base * rp.turn / this.preTurn - base;\r\n            this.pwmL += diff;\r\n            this.pwmR -= diff;\r\n          }\r\n          this.pwmL = Math.max(-100, Math.min(100, this.pwmL));\r\n          this.pwmR = Math.max(-100, Math.min(100, this.pwmR));\r\n        }\r\n      }\r\n    }\r\n    // バランスOFF/NOBLNCE=1\r\n    else if (this.commandSet.RunInfo.NOBLNCE === 1) {\r\n      let tmpL = rp.forward + rp.turn/2;\r\n      let tmpR = rp.forward - rp.turn/2;\r\n      if (tmpL > 100) { this.pwmL = 100; this.pwmR = tmpR - (tmpL-100); }\r\n      else if (tmpR > 100) { this.pwmR = 100; this.pwmL = tmpL - (tmpR-100); }\r\n      else { this.pwmL = tmpL; this.pwmR = tmpR; }\r\n      if (rp.forward === 0) { this.pwmL = this.commandSet.RunInfo.TRN/2; this.pwmR = -this.commandSet.RunInfo.TRN/2; }\r\n      this.preFwd = rp.forward;\r\n      this.preTurn = rp.turn;\r\n      // printf(\"\\n\"); // console.logはデフォルトで改行を含むため、明示的な改行は不要です。\r\n      // console.log(`controlRun: 0`);\r\n      // console.log(`FWD: ${rp.forward} TRN: ${rp.turn}`);\r\n      // console.log(`Pwm L:${this.pwmL} R:${this.pwmR}`);\r\n    }\r\n\r\n    this.preNoneBalancer = this.commandSet.RunInfo.NOBLNCE;\r\n\r\n    // モーターに出力\r\n    this.motorL.setPWM(this.pwmL);\r\n    this.motorR.setPWM(this.pwmR);\r\n\r\n    // printf(\"\\n\"); // console.logはデフォルトで改行を含むため、明示的な改行は不要です。\r\n    // console.log(`controlRun: 0`);\r\n    // console.log(`FWD: ${rp.forward} TRN: ${rp.turn}`);\r\n    // console.log(`Pwm L:${this.pwmL} R:${this.pwmR}`);\r\n    \r\n    // 速度追従姿勢制御\r\n    if ((this.commandSet.RunInfo.SPFLG & SEASOR_W) !== 0) {\r\n      this.gyroOffsetAdj2 = - (this.pwmL + this.pwmR)*0.2;\r\n      this.gyroOffsetAdj2 = Math.max(-20, Math.min(0, this.gyroOffsetAdj2));\r\n    } else {\r\n      this.gyroOffsetAdj2 = 0;\r\n    }\r\n  }\r\n\r\n  controlArm() {\r\n    if (!this.commandSet.RunInfo || !this.commandSet.RunInfo.ARMANG) {\r\n      return;\r\n    }\r\n    const ang = this.commandSet.RunInfo.ARMANG;\r\n    if (ang !== 0) {\r\n      const dif = this.armMotor.getCount() - this.armCount;\r\n      let fwd = 0;\r\n      if (ang > 0) fwd = dif < ang ? 100 : 0;\r\n      else fwd = dif > ang ? -100 : 0;\r\n      this.armMotor.setPWM(fwd);\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    // アラームキャンセルなど\r\n  }\r\n\r\n  getRunConInfo() {\r\n    return {\r\n      SNO: this.commandSet.SNO,\r\n      CNO: this.commandSet.CNO,\r\n      fwd: this.preFwd,\r\n      turn: this.preTurn,\r\n      pwmL: this.pwmL,\r\n      pwmR: this.pwmR,\r\n      gyro: this.blnceGyro\r\n    };\r\n  }\r\n\r\n  setCalibrationInfo(calib) {\r\n    this.calibrationInfo = {...calib};\r\n  }\r\n\r\n  peekMessage() {\r\n      return super.peekMessage();\r\n  }\r\n  getMessage() {\r\n      return super.getMessage();\r\n  }\r\n  sendMessage(message) {\r\n      super.sendMessage(message);\r\n  }\r\n}\r\n\r\n","/**\r\n * YAML設定ファイル読み込みシステム\r\n * コメント対応の設定管理\r\n */\r\n\r\nexport class YAMLConfigLoader {\r\n    constructor() {\r\n        this.yamlParser = null;\r\n        this.loadYAMLParser();\r\n    }\r\n\r\n    /**\r\n     * YAMLパーサーを動的に読み込み\r\n     */\r\n    async loadYAMLParser() {\r\n        try {\r\n            // js-yamlライブラリを動的に読み込み\r\n            const script = document.createElement('script');\r\n            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js';\r\n            script.onload = () => {\r\n                this.yamlParser = window.jsyaml;\r\n                console.log('YAMLパーサーが読み込まれました');\r\n            };\r\n            document.head.appendChild(script);\r\n        } catch (error) {\r\n            console.error('YAMLパーサーの読み込みに失敗しました:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * YAMLファイルを読み込んでオブジェクトに変換\r\n     * @param {string} yamlText - YAML形式のテキスト\r\n     * @returns {Object} パースされたオブジェクト\r\n     */\r\n    parseYAML(yamlText) {\r\n        if (!this.yamlParser) {\r\n            throw new Error('YAMLパーサーが読み込まれていません');\r\n        }\r\n\r\n        try {\r\n            return this.yamlParser.load(yamlText);\r\n        } catch (error) {\r\n            console.error('YAMLパースエラー:', error);\r\n            throw new Error(`YAML設定ファイルのパースに失敗しました: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * YAML設定ファイルを非同期で読み込み\r\n     * @param {string} filePath - ファイルパス\r\n     * @returns {Promise<Object>} 設定オブジェクト\r\n     */\r\n    async loadYAMLConfig(filePath) {\r\n        try {\r\n            const response = await fetch(filePath);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const yamlText = await response.text();\r\n            return this.parseYAML(yamlText);\r\n        } catch (error) {\r\n            console.error(`YAML設定ファイル読み込みエラー (${filePath}):`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 複数のYAML設定ファイルを一括読み込み\r\n     * @param {string[]} filePaths - ファイルパスの配列\r\n     * @returns {Promise<Object>} 統合された設定オブジェクト\r\n     */\r\n    async loadYAMLConfigs(filePaths) {\r\n        const configs = {};\r\n        \r\n        for (const filePath of filePaths) {\r\n            try {\r\n                const fileName = filePath.split('/').pop().replace('.yaml', '').replace('.yml', '');\r\n                configs[fileName] = await this.loadYAMLConfig(filePath);\r\n            } catch (error) {\r\n                console.warn(`YAML設定ファイル ${filePath} の読み込みをスキップしました:`, error);\r\n            }\r\n        }\r\n        \r\n        return configs;\r\n    }\r\n}\r\n\r\n/**\r\n * 複数年分のYAML設定管理クラス\r\n */\r\nexport class YAMLConfigManager {\r\n    constructor() {\r\n        this.loader = new YAMLConfigLoader();\r\n        this.currentYear = \"2023\";\r\n        this.configs = new Map();\r\n        this.isLoaded = false;\r\n    }\r\n\r\n    /**\r\n     * 初期化処理\r\n     */\r\n    async initialize() {\r\n        try {\r\n            // YAMLパーサーの読み込み完了を待つ\r\n            await this.waitForYAMLParser();\r\n            await this.loadAllConfigs();\r\n            this.isLoaded = true;\r\n            console.log('YAML設定の読み込みが完了しました');\r\n        } catch (error) {\r\n            console.error('YAML設定の読み込みに失敗しました:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * YAMLパーサーの読み込み完了を待つ\r\n     */\r\n    async waitForYAMLParser() {\r\n        return new Promise((resolve) => {\r\n            const checkParser = () => {\r\n                if (this.loader.yamlParser) {\r\n                    resolve();\r\n                } else {\r\n                    setTimeout(checkParser, 100);\r\n                }\r\n            };\r\n            checkParser();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 全年度の設定を読み込み\r\n     */\r\n    async loadAllConfigs() {\r\n        const years = [\"2023\",\"2024\",\"2025\",\"Test\"]; // 対応年度を追加\r\n        \r\n        for (const year of years) {\r\n            try {\r\n                const config = await this.loadYearConfig(year);\r\n                this.configs.set(year, config);\r\n                console.log(`${year}年のYAML設定を読み込みました`);\r\n            } catch (error) {\r\n                console.warn(`${year}年のYAML設定読み込みをスキップしました:`, error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 指定年度の設定を読み込み\r\n     * @param {number} year - 年度\r\n     * @returns {Object} 設定オブジェクト\r\n     */\r\n    async loadYearConfig(year) {\r\n        const configFiles = [\r\n            `config/years/${year}/robot.yaml`,\r\n            `config/years/${year}/course.yaml`,\r\n            // `config/years/${year}/sensors.yaml`,\r\n            // `config/years/${year}/rules.yaml`,\r\n        ];\r\n\r\n        const configs = await this.loader.loadYAMLConfigs(configFiles);\r\n        \r\n        return {\r\n            year: year,\r\n            robot: configs.robot || {},\r\n            course: configs.course || {},\r\n            sensors: configs.sensors || {},\r\n            rules: configs.rules || {}\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 現在の年度の設定を取得\r\n     * @returns {Object} 設定オブジェクト\r\n     */\r\n    getCurrentConfig() {\r\n        return this.getConfig(this.currentYear);\r\n    }\r\n\r\n    /**\r\n     * 指定年度の設定を取得\r\n     * @param {number} year - 年度\r\n     * @returns {Object} 設定オブジェクト\r\n     */\r\n    getConfig(year) {\r\n        if (!this.isLoaded) {\r\n            throw new Error('設定がまだ読み込まれていません。initialize()を先に呼び出してください。');\r\n        }\r\n\r\n        const config = this.configs.get(year);\r\n        config.imgpath = this.getPath(year) + config.course.image.filename;\r\n        if (!config) {\r\n            throw new Error(`${year}年の設定が見つかりません`);\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * 現在の年度を設定\r\n     * @param {number} year - 年度\r\n     */\r\n    setCurrentYear(year) {\r\n        if (!this.configs.has(year)) {\r\n            throw new Error(`${year}年の設定が読み込まれていません`);\r\n        }\r\n        \r\n        this.currentYear = year;\r\n        console.log(`現在の年度を${year}年に設定しました`);\r\n    }\r\n\r\n    /**\r\n     * 利用可能な年度のリストを取得\r\n     * @returns {number[]} 年度の配列\r\n     */\r\n    getAvailableYears() {\r\n        return Array.from(this.configs.keys()).sort();\r\n    }\r\n\r\n    /**\r\n     * パスを取得\r\n     * @param {*} year \r\n     * @returns \r\n     */\r\n    getPath(year) {\r\n        // Viteのbase設定を自動的に取得\r\n        const base = import.meta.env.BASE_URL || '/';\r\n        return `${base}config/years/${year}/`;\r\n    }\r\n}\r\n\r\n// グローバルに登録\r\nwindow.YAMLConfigManager = YAMLConfigManager;\r\nwindow.YAMLConfigLoader = YAMLConfigLoader;\r\n","// ロボットの振る舞いや状態をカプセル化するRobotクラスを定義します。\r\nexport class Robot {\r\n  /**\r\n   * 新しいRobotインスタンスを作成します。\r\n   * @param {string} name - ロボットの名前。\r\n   * @param {object} config - ロボットの初期設定を含むオブジェクト。`main.js`の`robot`オブジェクトの構造に従い、位置、サイズ、車輪情報などが含まれます。\r\n   */\r\n  constructor(name, config) {\r\n    this.name = name;\r\n    // main.jsのrobotオブジェクトのプロパティを初期化\r\n    const scale = 0.5; // main.jsの定義に合わせる\r\n\r\n    this.scale = scale;\r\n    this.x = config.robot.initial_position.x;\r\n    this.y = config.robot.initial_position.y;\r\n    this.angle = config.robot.initial_position.angle * (Math.PI / 180); // 向き（ラジアン）\r\n    this.width = config.robot.width * scale;\r\n    this.height = config.robot.height * scale;\r\n    this.wheelBase = config.robot.wheel.interval * scale; // 車輪間距離（mm想定）\r\n    this.wheelRadius = config.robot.wheel.radius * scale; // 車輪半径[mm]\r\n    this.wheelWidth = 5 * scale; // 車輪の幅\r\n    this.leftPower = 0; // 左モーター出力\r\n    this.rightPower = 0; // 右モーター出力\r\n    this.maxSpeed = config.robot.speed.max_speed; // 各出力×このスピードが実速度\r\n    this.color = config.robot.color;\r\n    this.sensorColor = config.robot.sensorColor;\r\n    this.wheelColor = config.robot.wheelColor;\r\n    this.axleColor = config.robot.axleColor;\r\n    this.sensor = { r: 0, g: 0, b: 0, brightness: 0 };\r\n\r\n    this.status = 'idle'; // ロボットの現在の状態 (例: 'idle', 'moving', 'working')\r\n    console.log(`${this.name} ロボットが起動しました。初期位置: (${this.x}, ${this.y})`);\r\n\r\n    // エンコーダの以前の値を保持するためのプロパティを追加\r\n    // this.lastLeftEncoderCount = 0;\r\n    // this.lastRightEncoderCount = 0;\r\n    \r\n  }\r\n\r\n  /**\r\n   * 左右車輪の移動距離（同じ単位）からロボットの位置を更新します。\r\n   * @param {number} currentLeftCount - 左車輪の移動距離\r\n   * @param {number} currentRightCount - 右車輪の移動距離\r\n   * @param {number} driveDirection - 走行方向\r\n   * @param {number} initialAngle - 初期角度\r\n   */\r\n  move(leftCount, rightCount, driveDirection, initialAngle) {\r\n    // const vl = leftCount - this.lastLeftEncoderCount;\r\n    // const vr = rightCount - this.lastRightEncoderCount;\r\n    const vl = parseFloat(leftCount);\r\n    const vr = parseFloat(rightCount);\r\n\r\n    // this.lastLeftEncoderCount = leftCount;\r\n    // this.lastRightEncoderCount = rightCount;\r\n    \r\n    // 移動の中心を考慮して更新（小角度近似）\r\n    this.angle = driveDirection + initialAngle * (Math.PI / 180);\r\n    const v = (vl + vr) / 2 * this.maxSpeed / 1000 ;\r\n    if (isNaN(v)) {\r\n      return;\r\n    }\r\n    this.x += v * Math.cos(this.angle);\r\n    this.y += v * Math.sin(this.angle);\r\n  }\r\n\r\n  /**\r\n   * ロボットの動作を停止させます。\r\n   */\r\n  stop() {\r\n    if (this.status === 'idle') {\r\n      console.log(`${this.name} は既に停止しています。`);\r\n      return;\r\n    }\r\n    console.log(`${this.name} が動作を停止しました。`);\r\n    this.status = 'idle';\r\n  }\r\n\r\n  /**\r\n   * 指定した前進速度と角速度でロボットの位置を1ステップ更新します。\r\n   * @param {number} forward - 前進速度（同一単位／秒）。\r\n   * @param {number} angularVel - 角速度（ラジアン／秒）。\r\n   * @param {number} dt - 時間刻み（秒）。\r\n   */\r\n  moveByVelocity(forward, angularVel, dt) {\r\n    // forward: 前進速度（distance / sec）\r\n    // angularVel: 角速度 rad/sec\r\n    if (typeof forward !== 'number') forward = 0;\r\n    if (typeof angularVel !== 'number') angularVel = 0;\r\n    if (typeof dt !== 'number' || dt <= 0) dt = 0.1;\r\n\r\n    // update pose\r\n    this.angle += angularVel * dt;\r\n    this.x += forward * Math.cos(this.angle) * dt;\r\n    this.y += forward * Math.sin(this.angle) * dt;\r\n  }\r\n\r\n  /**\r\n   * 現在の姿勢を返す\r\n   * @returns {{x:number,y:number,angle:number}}\r\n   */\r\n  getPose() {\r\n    return { x: this.x, y: this.y, angle: this.angle };\r\n  }\r\n\r\n  /**\r\n   * ロボットの現在の状態と位置を取得します。\r\n   * @returns {string} ロボットの状態と位置を示す文字列。\r\n   */\r\n  getStatus() {\r\n    return `${this.name} の現在の状態: ${this.status}, 位置: (${this.x}, ${this.y})`;\r\n  }\r\n}","import { Robot } from './robot.js';\r\n\r\nlet isDragging = false;\r\n\r\nexport class CanvasManager {\r\n    /**\r\n     * CanvasManagerの新しいインスタンスを作成します。\r\n     * @param {object} robotInstance - シミュレーション対象のロボットインスタンス。\r\n     */\r\n    constructor(robotInstance) {\r\n        this.robot = robotInstance;\r\n        this.isDragging = false;\r\n\r\n        this.pre = document.getElementById('outputContent');\r\n        this.canvas = document.getElementById(\"field\");\r\n        this.pdfcanvas = document.getElementById(\"pdf\");\r\n        this.trailcanvas = document.getElementById(\"trailCanvas\");\r\n        this.ctx = this.canvas.getContext(\"2d\", { willReadFrequently: true });\r\n        this.pdfctx = this.pdfcanvas.getContext(\"2d\", { willReadFrequently: true });\r\n        this.trailctx = this.trailcanvas.getContext(\"2d\", { willReadFrequently: true });\r\n\r\n        // 軌跡を保存する配列を追加\r\n        this.trail = [];\r\n\r\n        this._setupEventListeners();\r\n    }\r\n\r\n    /**\r\n     * キャンバスのイベントリスナーを設定します。\r\n     * @private\r\n     */\r\n    _setupEventListeners() {\r\n        this.canvas.addEventListener('mousedown', this._handleMouseDown.bind(this));\r\n        this.canvas.addEventListener('mousemove', this._handleMouseMove.bind(this));\r\n        this.canvas.addEventListener('mouseup', this._handleMouseUp.bind(this));\r\n        this.canvas.addEventListener('mouseleave', this._handleMouseUp.bind(this)); // マウスがキャンバスを離れた場合もドラッグを終了\r\n    }\r\n\r\n    /**\r\n     * マウスダウンイベントを処理します。\r\n     * @param {MouseEvent} event - マウスイベントオブジェクト。\r\n     * @private\r\n     */\r\n    _handleMouseDown(event) {\r\n        const mouseX = event.clientX - this.canvas.offsetLeft;\r\n        const mouseY = event.clientY - this.canvas.offsetTop;\r\n        // Check clickable scenario markers first\r\n        if (Array.isArray(window.SCENARIO_MARKERS)) {\r\n            for (let i = 0; i < window.SCENARIO_MARKERS.length; i++) {\r\n                const m = window.SCENARIO_MARKERS[i];\r\n                const dx = mouseX - m.robot.x;\r\n                const dy = mouseY - m.robot.y;\r\n                const dist2 = dx * dx + dy * dy;\r\n                const radius = Math.max(this.robot.width, this.robot.height);\r\n                if (dist2 <= (radius * radius)) {\r\n                    // clicked a marker\r\n                    this._showMarkerInfo(m);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        // ロボットの範囲内でクリックされたか確認\r\n        if (mouseX >= this.robot.x - this.robot.width / 2 && mouseX <= this.robot.x + this.robot.width / 2 &&\r\n            mouseY >= this.robot.y - this.robot.height / 2 && mouseY <= this.robot.y + this.robot.height / 2) {\r\n            this.isDragging = true;\r\n        }\r\n    }\r\n\r\n    _showMarkerInfo(marker) {\r\n        // simple info display in output area\r\n        if (this.pre) {\r\n            const date = new Date(marker.timestamp).toLocaleString();\r\n            const time = marker.timestamp % 1000; // ミリ秒を取得\r\n            this.pre.innerHTML += `Marker @ ${date} ${time}ms: `;\r\n            this.pre.innerHTML += `x=${marker.robot.x}, y=${marker.robot.y}, angle=${marker.robot.angle}\\n`;\r\n        } else {\r\n            console.log('Marker', marker);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * マウスムーブイベントを処理します。\r\n     * @param {MouseEvent} event - マウスイベントオブジェクト。\r\n     * @private\r\n     */\r\n    _handleMouseMove(event) {\r\n        const mouseX = event.clientX - this.canvas.offsetLeft;\r\n        const mouseY = event.clientY - this.canvas.offsetTop;\r\n\r\n        // hover over markers -> change cursor\r\n        let hoverFound = false;\r\n        if (Array.isArray(window.SCENARIO_MARKERS)) {\r\n            for (let i = 0; i < window.SCENARIO_MARKERS.length; i++) {\r\n                const m = window.SCENARIO_MARKERS[i];\r\n                const dx = mouseX - m.robot.x;\r\n                const dy = mouseY - m.robot.y;\r\n                const dist2 = dx * dx + dy * dy;\r\n                const radius = Math.max(this.robot.width, this.robot.height);\r\n                if (dist2 <= (radius * radius)) {\r\n                    hoverFound = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.canvas.style.cursor = hoverFound ? 'pointer' : (this.isDragging ? 'grabbing' : 'default');\r\n\r\n        if (this.isDragging) {\r\n            this.robot.x = mouseX; // ロボットのX座標を更新\r\n            this.robot.y = mouseY;  // ロボットのY座標を更新\r\n            this.draw(); // 描画関数を呼び出して更新\r\n        }\r\n    }\r\n\r\n    /**\r\n     * マウスアップイベントを処理します。\r\n     * @private\r\n     */\r\n    _handleMouseUp() {\r\n        this.isDragging = false; // ドラッグを終了\r\n    }\r\n\r\n    /**\r\n     * 初期化処理（背景描画など）を実行します。\r\n     */\r\n    inits() {\r\n        this.drawBackground();\r\n    }\r\n\r\n    /**\r\n     * メインループを実行します。\r\n     */\r\n    async loop() {\r\n        this.updateRobot();\r\n        this.draw();\r\n        this.drawTrail();\r\n\r\n        const color1 = this.getSensorColor(this.robot.x, this.robot.y, this.robot.angle);\r\n        const color2 = this.getSensorColor(this.robot.x + 1, this.robot.y, this.robot.angle);\r\n        // RGB値を0-70の範囲に変換（黒=0, 白=70）\r\n        const brightness1 = Math.round((color1.r + color1.g + color1.b) / 3 * 70 / 255);\r\n        const brightness2 = Math.round((color2.r + color2.g + color2.b) / 3 * 70 / 255);\r\n        const brightness = (brightness1 + brightness2) / 2;\r\n        this.robot.sensor = { r: color1.r, g: color1.g, b: color1.b, brightness: brightness};\r\n        const rgb = `rgb(${Math.floor(color1.r).toString().padStart(3, '0')},${Math.floor(color1.g).toString().padStart(3, '0')},${Math.floor(color1.b).toString().padStart(3, '0')})`;\r\n        this.ctx.fillStyle = rgb; // センサー色で塗りつぶしスタイルを設定\r\n        this.ctx.fillRect(10, 30, 20, 20); // センサー色を示す四角形を描画\r\n\r\n        this.ctx.fillStyle = \"black\";\r\n        this.ctx.font = \"16px sans-serif\";\r\n        this.ctx.fillText(`センサー色: ${rgb} (明度: ${brightness})`, 10, 20);\r\n        \r\n        // 軌跡を保存\r\n        this.trail.push({ x: window.formData.getValue('xCoord'), y: window.formData.getValue('yCoord') });\r\n        \r\n        requestAnimationFrame(this.loop.bind(this)); // 'this'コンテキストを維持するためにbindを使用\r\n    }\r\n    \r\n    /**\r\n     * ロボットの状態を更新します（差動駆動モデル）。\r\n     */\r\n    updateRobot() {        \r\n    \r\n        if (window.LEFTMOTOR && window.RIGHTMOTOR && window.formData) {\r\n            // getCountは累積値なので、前回の値との差分を今回の移動量とする\r\n            const left = window.formData.getValue('leftPower');\r\n            const right = window.formData.getValue('rightPower');\r\n            \r\n            let coordinate = {};\r\n            window.STATUSMONITOR.getCoordinateInfo(coordinate);\r\n\r\n            console.log(`coordinate.driveDirection: ${coordinate.driveDirection}`);\r\n\r\n            this.robot.move(left, right, coordinate.driveDirection, window.config.robot.initial_position.angle);\r\n        }\r\n        // 座標を描画\r\n        window.formData.renderRobot(this.robot);\r\n    }\r\n    \r\n    /**\r\n     * 背景（PDF）を描画します。\r\n     */\r\n    drawBackground() {        \r\n        const imgpath = window.configManager.getCurrentConfig().imgpath;\r\n        // pdfjsLibはグローバル変数として読み込まれていると仮定\r\n        const loadingTask = pdfjsLib.getDocument(imgpath);\r\n        loadingTask.promise.then(pdf => {\r\n            console.log(\"PDF読み込み完了, ページ数:\", pdf.numPages);\r\n        \r\n            // 1ページ目を取得\r\n            pdf.getPage(1).then(page => {\r\n              const scale = 1.0; // 拡大率\r\n              const viewport = page.getViewport({ scale });\r\n\r\n              this.pdfcanvas.height = viewport.height;\r\n              this.pdfcanvas.width = viewport.width / 2;\r\n              // ページをcanvasに描画\r\n              const renderContext = {\r\n                canvasContext: this.pdfctx,\r\n                viewport: viewport.clone({ offsetX: 0, offsetY: 0 }) // Lコース\r\n              };\r\n              const renderTask = page.render(renderContext);\r\n            });\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * ロボットと関連情報をキャンバスに描画します。\r\n     */\r\n    draw() {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // キャンバスをクリア\r\n        this.ctx.save();\r\n        this.ctx.translate(this.robot.x, this.robot.y);\r\n        this.ctx.rotate(this.robot.angle);\r\n\r\n        this.drawRobot(this.ctx, this.robot);\r\n    }\r\n    \r\n    drawTrail() {\r\n        if (this.trail.length < 2) {\r\n            return;\r\n        }\r\n        // 軌跡を描画\r\n        this.trailctx.strokeStyle = \"rgb(255, 0, 0)\";     // 線の色\r\n        this.trailctx.lineWidth = 2;            // 線の太さ\r\n        this.trailctx.beginPath(); // 新しいパスを開始\r\n        if (this.trail.length > 1) {\r\n            this.trailctx.moveTo(this.trail[this.trail.length-2].x, this.trail[this.trail.length-2].y); // スタート地点に移動\r\n            this.trailctx.lineTo(this.trail[this.trail.length-1].x, this.trail[this.trail.length-1].y); // 各ポイントに線を引く\r\n        }\r\n        this.trailctx.stroke(); // 線を描画\r\n        this.trailctx.closePath();\r\n\r\n        // Draw scenario-change markers\r\n        if (Array.isArray(window.SCENARIO_MARKERS) && window.SCENARIO_MARKERS.length > 0) {\r\n            const m = window.SCENARIO_MARKERS[window.SCENARIO_MARKERS.length - 1];\r\n            if (!m.isDraw) {\r\n                m.isDraw = true;\r\n                this.trailctx.save(); // 現在の状態を保存\r\n                this.trailctx.translate(m.robot.x, m.robot.y); // マーカーの位置に移動\r\n                this.trailctx.rotate(m.robot.angle); // ロボットの角度に回転\r\n    \r\n                this.drawRobot(this.trailctx, m.robot);\r\n                \r\n                // label\r\n                this.trailctx.fillStyle = 'black';\r\n                this.trailctx.font = '12px sans-serif';\r\n                this.trailctx.fillText(`S:${m.commandSet.SNO} C:${m.commandSet.CNO}`, m.robot.x + 20, m.robot.y - 10);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ロボットを描画するメソッドです。\r\n     * @param {CanvasRenderingContext2D} ctx - 描画コンテキスト。\r\n     * @param {object} robot - 描画するロボットの情報を含むオブジェクト。\r\n     */\r\n    drawRobot(ctx, robot) {\r\n        // 左輪を描画\r\n        ctx.fillStyle = robot.wheelColor;\r\n        ctx.fillRect(-1 * robot.height, -1 * robot.width, robot.wheelRadius * 2, robot.wheelWidth * 1.5); // 左車輪の位置を四角で描画\r\n        ctx.fillRect(-1 * robot.height, +1 * robot.width, robot.wheelRadius * 2, robot.wheelWidth * 1.5); // 左車輪の位置を四角で描画\r\n\r\n        ctx.fillStyle = robot.axleColor;\r\n        ctx.fillRect(-1 * robot.height / 2, -1 * robot.width, 5, robot.wheelBase * 2 / 3); // 左車輪の位置を四角で描画\r\n                \r\n        // 本体\r\n        ctx.fillStyle = robot.color;\r\n        ctx.beginPath();\r\n        ctx.fillRect(-robot.height / 2, -robot.width / 2, robot.height, robot.width);\r\n        ctx.closePath();\r\n\r\n        // センサー（前方中心に赤い点）\r\n        ctx.fillStyle = robot.sensorColor;\r\n        ctx.beginPath();\r\n        ctx.arc(robot.height / 2, 0, 3, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        ctx.closePath();\r\n\r\n        ctx.restore(); // 状態を復元\r\n    }\r\n\r\n    /**\r\n     * 指定された位置と角度におけるセンサーの色をPDFキャンバスから取得します。\r\n     * @param {number} x - センサーのX座標。\r\n     * @param {number} y - センサーのY座標。\r\n     * @param {number} angle - ロボットの角度。\r\n     * @returns {{r: number, g: number, b: number}} - センサーが読み取ったRGB値。\r\n     */\r\n    getSensorColor(x, y, angle) {\r\n        let sensorX = x + Math.cos(angle) * (this.robot.width / 2);\r\n        let sensorY = y + Math.sin(angle) * (this.robot.width / 2) + 5; // センサーの位置を下に移動\r\n        sensorX = Math.floor(this.pdfcanvas.width / this.canvas.width * sensorX);\r\n        sensorY = Math.floor(this.pdfcanvas.height / this.canvas.height * sensorY);\r\n        // if (isNaN(sensorX) || isNaN(sensorY)) {\r\n        //     console.error(`${this.pdfcanvas.width}, ${ this.canvas.width} ${this.pdfcanvas.height}, ${ this.canvas.height}`); \r\n        //     console.error(`angle: ${angle}`); \r\n        //     return { r: 0, g: 0, b: 0 };\r\n        // }\r\n        const pixel = this.pdfctx.getImageData(sensorX, sensorY, 1, 1).data;\r\n\r\n        return { r: pixel[0], g: pixel[1], b: pixel[2] };\r\n    }\r\n}\r\n","export class ScenarioJsonLoader {\r\n    constructor() {\r\n        // シナリオローダーの初期化\r\n    }\r\n    /**\r\n     * シナリオデータを初期化し、NaN値を0に設定します。\r\n     * @param {Array<Object>} scenarioData - 初期化前のシナリオデータの配列\r\n     * @returns {Array<Object>} 初期化されたシナリオデータの配列\r\n     * @private\r\n     */\r\n    initializeScenarioData(scenarioData) {\r\n        if (!Array.isArray(scenarioData)) {\r\n            console.warn(\"シナリオデータが配列ではありません。初期化をスキップします。\", scenarioData);\r\n            return scenarioData;\r\n        }\r\n\r\n        return scenarioData.map(result => {\r\n            const initializedResult = { ...result }; // 元のオブジェクトを変更しないようにコピー\r\n\r\n            // RunInfoの初期化\r\n            if (!initializedResult.RunInfo) {\r\n                initializedResult.RunInfo = {};\r\n            }\r\n            // NaNチェックと0初期化\r\n            if (isNaN(initializedResult.RunInfo.FUNCNO)) initializedResult.RunInfo.FUNCNO = 0;\r\n            if (isNaN(initializedResult.RunInfo.FWD)) initializedResult.RunInfo.FWD = 0;\r\n            if (isNaN(initializedResult.RunInfo.TRN)) initializedResult.RunInfo.TRN = 0;\r\n            if (isNaN(initializedResult.RunInfo.KP)) initializedResult.RunInfo.KP = 0;\r\n            if (isNaN(initializedResult.RunInfo.KI)) initializedResult.RunInfo.KI = 0;\r\n            if (isNaN(initializedResult.RunInfo.KD)) initializedResult.RunInfo.KD = 0;\r\n            if (isNaN(initializedResult.RunInfo.NOBLNCE)) initializedResult.RunInfo.NOBLNCE = 0;\r\n            if (isNaN(initializedResult.RunInfo.WPER)) initializedResult.RunInfo.WPER = 0;\r\n\r\n            // SwitchInfoの初期化\r\n            if (!initializedResult.SwitchInfo) {\r\n                initializedResult.SwitchInfo = {};\r\n            }\r\n            // NaNチェックと0初期化\r\n            if (isNaN(initializedResult.SwitchInfo.SCJFN)) initializedResult.SwitchInfo.SCJFN = 0;\r\n            if (isNaN(initializedResult.SwitchInfo.SCT)) initializedResult.SwitchInfo.SCT = 0;\r\n            if (isNaN(initializedResult.SwitchInfo.SCD)) initializedResult.SwitchInfo.SCD = 0;\r\n            if (isNaN(initializedResult.SwitchInfo.SCR)) initializedResult.SwitchInfo.SCR = 0;\r\n            if (isNaN(initializedResult.SwitchInfo.SCC)) initializedResult.SwitchInfo.SCC = 0;\r\n            if (isNaN(initializedResult.SwitchInfo.SCV)) initializedResult.SwitchInfo.SCV = 0;\r\n            if (isNaN(initializedResult.SwitchInfo.JMPSNO)) initializedResult.SwitchInfo.JMPSNO = 0;\r\n            if (isNaN(initializedResult.SwitchInfo.SCX)) initializedResult.SwitchInfo.SCX = 0;\r\n            if (isNaN(initializedResult.SwitchInfo.SCY)) initializedResult.SwitchInfo.SCY = 0;\r\n\r\n            // CoordCorrectInfoの初期化\r\n            if (!initializedResult.CoordCorrectInfo) {\r\n                initializedResult.CoordCorrectInfo = {};\r\n            }\r\n\r\n            return initializedResult;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * JSON形式のシナリオファイルを非同期で読み込み、パースして初期化します。\r\n     * @param {string} filePath - シナリオファイルのパス\r\n     * @returns {Promise<Array<Object>>} パースされ初期化されたシナリオデータの配列\r\n     */\r\n    /**\r\n     * 指定されたURLからJSON形式のシナリオデータを非同期で読み込み、パースして初期化します。\r\n     * ファイルパス（相対パス）もURLとして扱われます。\r\n     * @param {string} url - シナリオデータのURLまたはファイルパス\r\n     * @returns {Promise<Array<Object>>} パースされ初期化されたシナリオデータの配列\r\n     */\r\n    async loadScenarioFromUrl(url) {\r\n        try {\r\n            const response = await fetch(url);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTPエラー! ステータス: ${response.status} (${url})`);\r\n            }\r\n            const jsonText = await response.text();\r\n            return this.loadScenarioFromText(jsonText);\r\n        } catch (error) {\r\n            console.error(`シナリオデータ (${url}) の読み込みまたはパース中にエラーが発生しました:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * JSONテキストからシナリオデータをパースし、初期化します。\r\n     * @param {string} jsonText - JSON形式のシナリオデータ文字列\r\n     * @returns {Array<Object>} パースされ初期化されたシナリオデータの配列\r\n     */\r\n    loadScenarioFromText(jsonText) {\r\n        try {\r\n            let scenarioData = JSON.parse(jsonText);\r\n            scenarioData = this.initializeScenarioData(scenarioData);\r\n            console.log(\"シナリオデータ（初期化後）:\", scenarioData);\r\n            return scenarioData;\r\n        } catch (error) {\r\n            console.error(`JSONテキストのパース中にエラーが発生しました:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","export class FormData {\r\n    constructor(formId) {\r\n        this.formId = formId;\r\n    }\r\n\r\n    setValue(fieldId, value) {\r\n        const field = document.getElementById(fieldId);\r\n        if (field) {\r\n            if (!isNaN(value)) {\r\n                field.value = Math.round(value);\r\n            }\r\n            else {\r\n                field.value = value;\r\n            }\r\n        } else {\r\n            console.warn(`Field with ID ${fieldId} not found.`);\r\n        }\r\n    }\r\n\r\n    getValue(fieldId) {\r\n        const field = document.getElementById(fieldId);\r\n        return field ? field.value : null;\r\n    }\r\n\r\n    renderCoordinate(coord) {\r\n        try {\r\n            this.setValue('distance', coord.distance);\r\n            this.setValue('x', coord.x)\r\n            this.setValue('y', coord.y)\r\n            this.setValue('angle2', coord.driveDirection * 180 / Math.PI)\r\n        } catch (e) {\r\n            console.error('renderCoordinate failed', e);\r\n        }\r\n    }\r\n\r\n    renderRobot(robot) {\r\n        // this.setValue('leftPower', robot.leftPower)\r\n        // this.setValue('rightPower', robot.rightPower)\r\n        this.setValue('xCoord', robot.x)\r\n        this.setValue('yCoord', robot.y)\r\n        this.setValue('angle', robot.angle * 180 / Math.PI)\r\n    }\r\n};","// エイリアス形式のimport文を削除し、相対パス形式のみ残す\r\nimport { Navigator } from './Task/Navigator.js';\r\nimport { StatusMonitor } from './Task/StatusMonitor.js';\r\nimport { ScenarioControl } from './Task/ScenarioControl.js';\r\nimport { Message } from './Task/Message.js';\r\nimport { RunControl } from './Task/RunControl.js';\r\nimport { Sorot } from './Task/Sorot.js';\r\nimport { YAMLConfigManager } from './config/yaml-config-loader.js';\r\nimport { Robot } from './robot.js';\r\nimport { CanvasManager } from './canvas.js';\r\nimport { LOG_TRACE, LOG_DBG, LOG_INF, LOG_WARN, LOG_ERRORS, LOG_CRITICAL } from './Utillity/logger.js';\r\nimport { ScenarioJsonLoader } from './ScenarioJsonLoader.js';\r\nimport { FormData } from './form.js';\r\nimport { SorotMotor } from './Sensor/SorotMotor.js';\r\nimport { HWMonitor } from './Sensor/HWMonitor.js';\r\n\r\n\r\nlet pre = null;\r\nlet canvas;\r\nlet ctx;\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    pre = document.getElementById('outputContent');\r\n    canvas = document.getElementById(\"field\");\r\n    ctx = canvas.getContext(\"2d\", { willReadFrequently: true });\r\n});\r\n\r\n// ==========================================================\r\n\r\n// main.js\r\nconst RCVHEADERSIZE = 5;\r\nlet scenarioData = null;\r\n\r\nasync function runNavigator() {\r\n    // RunControlの処理\r\n    console.log(\"navigator\\n\");\r\n    const instance = Navigator.getInstance();\r\n    while(1)\r\n    {\r\n        // console.log(\"navigator_while\");\r\n        instance.run();\r\n        await new Promise(resolve => setTimeout(resolve, 10));\r\n    }\r\n}\r\n\r\nasync function runStautsMonitor() {\r\n    // RunControlの処理\r\n    console.log(\"status_monitor_task\\n\");\r\n    const instance = StatusMonitor.getInstance();\r\n    while(1)\r\n    {\r\n        // console.log(\"status_monitor_task_while\");\r\n        instance.run();\r\n        await new Promise(resolve => setTimeout(resolve, 10));\r\n        const coordinate = {};\r\n        window.STATUSMONITOR.getCoordinateInfo(coordinate);\r\n        window.formData.renderCoordinate(coordinate);\r\n    }\r\n}\r\n\r\nasync function runScenarioControl() {\r\n    // RunControlの処理\r\n    console.log(\"scenario_control_task\\n\");\r\n    const instance = ScenarioControl.getInstance();\r\n    while(1)\r\n    {\r\n        // LOG_DBG(\"scenario_control_while\");\r\n        instance.run();\r\n        await new Promise(resolve => setTimeout(resolve, 10));\r\n    }\r\n}\r\n\r\n/**\r\n * SOROTタスク\r\n */\r\nasync function sorotTask() {\r\n\r\n    console.log(\"sorot\");\r\n\r\n    window.SOROT.run();  // 走行\r\n\r\n    // while(true) {\r\n    //     STATUSMONITOR.run();\r\n    //     NAVIGATOR.run();\r\n    //     SCENARIOCONTROL.run();\r\n    //     // if(SCENARIOCONTROL.IsEndScenario()) break;\r\n    //     RUNCONTROL.run();\r\n    //     // await new Promise(resolve => setTimeout(resolve, 10000));\r\n    // }\r\n\r\n    // タスクを終了\r\n}\r\n\r\nasync function runRunControl() {\r\n    // RunControlの処理\r\n    console.log(\"run_control_task\\n\");\r\n    const instance = RunControl.getInstance();\r\n    while(1)\r\n    {\r\n        instance.run();\r\n        await new Promise(resolve => setTimeout(resolve, 10));\r\n    }\r\n}\r\n\r\nasync function runLoadScenario () {\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    let rcv = {};\r\n    let length;\r\n\r\n    window.SOROT.initialize();\r\n\tDUMMYPC_initialize(rcv, length);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    pre.innerHTML += `シナリオ読み込み開始\\n`;\r\n\tDUMMYPC_loadScenario(rcv, length);\r\n    runScenarioControl();\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    while (1) {\r\n        if (SCENARIOCONTROL.mSubScenarioList.length > 0) {\r\n            for (let subScenario of SCENARIOCONTROL.mSubScenarioList[0].mArrCommandSet) {\r\n                pre.innerHTML += `ScenaIN ${subScenario.SNO} ${subScenario.CNO}\\n`;\r\n            }\r\n            break;\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n    }\r\n    pre.innerHTML += `シナリオが読み込み完了\\n`;\r\n\r\n\tDUMMYPC_calibration(rcv, length);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n\t// DUMMYPC->receive(&rcv, length);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n}\r\n\r\nasync function DUMMYPC_initialize(rcv, length)\r\n{\r\n\tlet len = 0;\r\n\tlet sndMsg;\r\n\r\n\t// console.log(`dummy ${arguments.callee.name} ${new Error().lineNumber}\\n`);\r\n\r\n    //Initial状態：初期化実行を指示してIdle状態へ遷移\r\n\t// console.log(`${arguments.callee.name} DummyPC::initialize\\n`);\r\n\r\n    rcv.cmdID = Message.CMD_INIT;\r\n\tlen = RCVHEADERSIZE;\r\n\twindow.SOROT.setStatus(Sorot.Idle);\r\n\r\n\tsndMsg = new Message(rcv.cmdID, rcv.data, 0);\r\n\tLOG_TRACE(\"SOROT->sendMessage\");\r\n\twindow.SOROT.sendMessage(sndMsg);\r\n\r\n\treturn len;\r\n}\r\n\r\nasync function DUMMYPC_loadScenario(rcv, length) {\r\n    let len = 0;\r\n    let sndMsg;\r\n    let listNo = 0;\r\n\r\n    console.log(`dummy loadScenario\\n`);\r\n    console.log(`loadScenario Sorot::Idle\\n`);\r\n    console.log(\"読み込み\");\r\n    \r\n    for (let mIndex = 0; mIndex < scenarioData.length; mIndex++) {\r\n        rcv.cmdID = Message.CMD_INSERT_SCENARIO;\r\n        rcv.data = scenarioData[mIndex];\r\n\r\n        sndMsg = new Message(rcv.cmdID, rcv.data, RCVHEADERSIZE);\r\n        console.log(`SCENARIOCONTROL->sendMessage: ${rcv.cmdID}`);\r\n        window.SCENARIOCONTROL.sendMessage(sndMsg);\r\n    }\r\n\r\n    rcv.cmdID = Message.CMD_INSERT_SUB_LIST;\r\n    len = RCVHEADERSIZE;\r\n    sndMsg = new Message(rcv.cmdID, rcv.data, 0);\r\n    console.log(`SCENARIOCONTROL->sendMessage: ${rcv.cmdID}`);\r\n    window.SCENARIOCONTROL.sendMessage(sndMsg);\r\n\r\n    const sList = new Array(1);\r\n    sList[0] = 24; // MAIN_LEFT\r\n\r\n    for (listNo = 0; listNo < sList.length; listNo++) {\r\n        rcv.data[listNo] = sList[listNo]; // サブシナリオNo\r\n        console.log(`LOAD ${listNo}: ${sList[listNo]}`);\r\n    }\r\n    console.log(\"読み込み完了\");\r\n\r\n    rcv.cmdID = Message.CMD_INSERT_SCN_LIST;\r\n    len = RCVHEADERSIZE + listNo;\r\n    sndMsg = new Message(rcv.cmdID, rcv.data, len);\r\n    console.log(`SCENARIOCONTROL->sendMessage: ${rcv.cmdID}`);\r\n    window.SCENARIOCONTROL.sendMessage(sndMsg);\r\n\r\n    window.SOROT.setStatus(Sorot.Downloaded);\r\n    return len;\r\n}\r\n\r\nasync function DUMMYPC_calibration(rcv) {\r\n    let len = 0;\r\n    let sndMsg;\r\n    let listNo = 0;\r\n    let cmdSet = null;\r\n\r\n    // console.log(`dummy ${calibration.name} ${new Error().lineNumber}`);\r\n    rcv.cmdID = Message.CMD_START_CALIB;\r\n    len = RCVHEADERSIZE;\r\n    window.SOROT.setStatus(Sorot.Calibrating);\r\n    sndMsg = new Message(rcv.cmdID, rcv.data, 0);\r\n    console.log(\"SOROT->sendMessage\");\r\n    window.SOROT.doCalibration(sndMsg);\r\n    return len;\r\n}\r\n\r\nasync function runScenario () {\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    let rcv = {};\r\n    let length;\r\n    DUMMYPC_readyToStart(rcv, length);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n}\r\n\r\n/**\r\n * @brief システムの準備が整ったことを示し、実行を開始します。\r\n *\r\n * タッチセンサーが押されるのを待ち、押されたらシナリオの開始を指示します。\r\n * 受信データに開始シナリオ番号とコマンドセット番号を設定し、\r\n * Sorotの状態をRunningに遷移させます。\r\n *\r\n * @param rcv 受信データのオブジェクト\r\n * @param length 受信データの長さ\r\n * @return 実行開始処理の結果としてのデータ長\r\n */\r\nasync function DUMMYPC_readyToStart(rcv, length) {\r\n    let len = 0;\r\n    let sndMsg;\r\n    let listNo = 0;\r\n    let cmdSet = null;\r\n\r\n    console.log(`dummy readyToStart 217`);\r\n\r\n    // // タッチセンサーが押されるのを待つ\r\n    // await waitForPressed(\"touch>StartRun\", 0, HUB_BUTTON_LEFT);\r\n    // SPEAKER.beep();\r\n\r\n    rcv.cmdID = Message.CMD_START;\r\n\r\n    rcv.data = {\r\n        0 : 0, \r\n        1 : 0\r\n    }; // 開始シナリオ番号、開始コマンドセット番号\r\n\r\n    len = RCVHEADERSIZE + 2; // uint8_tは2バイト\r\n    window.SOROT.setStatus(Sorot.Running);\r\n    sndMsg = new Message(rcv.cmdID, rcv.data, 2);\r\n    console.log(\"SOROT->sendMessage\");\r\n    window.SOROT.sendMessage(sndMsg);\r\n    return len;\r\n}\r\n\r\nasync function load() {\r\n    // 並行してColorMonitorとRunControlを実行\r\n    const scenarioInput = window.formData.getValue('scenarioInput');\r\n\r\n    try {\r\n        // scenarioData = JSON.parse(scenarioInput);\r\n        // console.log(\"シナリオデータ（初期化前）:\", scenarioData);\r\n        \r\n        const loader = new ScenarioJsonLoader();\r\n        scenarioData = await loader.loadScenarioFromText(scenarioInput);\r\n        \r\n        console.log(\"シナリオデータ（初期化後）:\", scenarioData);\r\n        \r\n    } catch (error) {\r\n        console.error(`JSONの解析中にエラーが発生しました: ${error.message} (位置: ${error.position})`);\r\n        pre.innerHTML += \"無効なJSON形式です。\\n\";\r\n        return;\r\n    }\r\n    await Promise.all([runScenarioControl(), runLoadScenario()]);\r\n}\r\n\r\nasync function main() {\r\n    window.robot.x = globalObj.robot.init.x;\r\n    window.robot.y = globalObj.robot.init.y;\r\n    window.robot.angle = globalObj.robot.init.angle;\r\n    // 並行してColorMonitorとRunControlを実行\r\n    Promise.all([sorotTask()]);\r\n    // 並行してColorMonitorとRunControlを実行\r\n    await Promise.all([runNavigator(), runRunControl(), runStautsMonitor(), runScenario()]);\r\n}\r\n\r\nasync function runUnitTest() {\r\n    let jsonText;\r\n\r\n    try {\r\n        const response = await fetch(globalObj.config.robot.scenario.unittest_url);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTPエラー! ステータス: ${response.status} (${url})`);\r\n        }\r\n        jsonText = await response.text();\r\n    } catch (error) {\r\n        console.error(`シナリオデータ (${url}) の読み込みまたはパース中にエラーが発生しました:`, error);\r\n        throw error;\r\n    }\r\n\r\n    let sd = JSON.parse(jsonText);\r\n    const loader = new ScenarioJsonLoader();\r\n    if (Array.isArray(sd)) {\r\n        console.log(`単体テスト用に複数のシナリオ (${sd.length}個) が読み込まれました。各シナリオを順次確認します。`);\r\n        for (const [index, scenario] of sd.entries()) {\r\n            scenarioData = loader.initializeScenarioData(sd[index]);\r\n            window.formData.setValue('scenarioInput', JSON.stringify(scenarioData, null, 4));\r\n\r\n            Promise.all([runScenarioControl(), runLoadScenario()]);\r\n            await new Promise(resolve => setTimeout(resolve, 3000));\r\n\r\n            window.robot.x = globalObj.robot.init.x;\r\n            window.robot.y = globalObj.robot.init.y;\r\n            window.robot.angle = globalObj.robot.init.angle;\r\n            const leftMotor = new SorotMotor('leftPower');\r\n            const rightMotor = new SorotMotor('rightPower');\r\n            window.LEFTMOTOR = leftMotor;\r\n            window.RIGHTMOTOR = rightMotor;\r\n            const hwMonitor = new HWMonitor(leftMotor, rightMotor);\r\n            window.HWMONITOR = hwMonitor;\r\n            // // create singleton StatusMonitor instance\r\n            // if (window.STATUSMONITOR) {\r\n            //   StatusMonitor.mSingleton = null;\r\n            // }\r\n            // window.STATUSMONITOR = StatusMonitor.getInstance();\r\n\r\n            Promise.all([sorotTask(), runNavigator(), runRunControl(), runStautsMonitor(), runScenario()]);\r\n            await new Promise(resolve => setTimeout(resolve, 10000));\r\n            window.SCENARIOCONTROL.clearScenario();\r\n            window.SCENARIOCONTROL.mScnNoListIndex = 0;\r\n            window.SCENARIOCONTROL.mSubScenarioList = [];\r\n\r\n        }\r\n    }\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n    const configManager = new YAMLConfigManager();\r\n    await configManager.initialize(); // 初期化が完了するまで待つ\r\n    window.configManager = configManager;\r\n    const config = configManager.getCurrentConfig();\r\n    const robot = new Robot('robot', config);\r\n    robot.init = {...robot};\r\n    const canvasManager = new CanvasManager(robot);\r\n    canvasManager.inits();\r\n    canvasManager.loop();\r\n\r\n    globalObj.robot = robot;\r\n    globalObj.config = config;\r\n    globalObj.SOROT = new Sorot(1);\r\n    globalObj.RUNCONTROL = RunControl.getInstance();\r\n    globalObj.STATUSMONITOR = StatusMonitor.getInstance();\r\n    globalObj.SCENARIOCONTROL = ScenarioControl.getInstance();\r\n    globalObj.NAVIGATOR = Navigator.getInstance();\r\n    // 保持するシナリオ変更マーカーの配列\r\n    globalObj.SCENARIO_MARKERS = [];\r\n    globalObj.RCVHEADERSIZE = RCVHEADERSIZE;\r\n    globalObj.gWhite = config.robot.sensors.color.white_threshold;\r\n    globalObj.gBlack = config.robot.sensors.color.black_threshold;\r\n\r\n    const url = config.robot.scenario.url\r\n    const text = await fetch(url).then(response => response.text());\r\n    globalObj.formData.setValue('scenarioInput', text);\r\n});\r\n\r\n// 既にグローバルに存在していれば再生成しない\r\nconst globalObj = typeof window !== \"undefined\" ? window : globalThis;\r\n\r\n// Expose module-scoped functions to window so inline handlers in index.html can call them\r\nglobalObj.load = typeof load !== 'undefined' ? load : undefined;\r\nglobalObj.main = typeof main !== 'undefined' ? main : undefined;\r\nglobalObj.runUnitTest = typeof runUnitTest !== 'undefined' ? runUnitTest : undefined;\r\nglobalObj.formData = new FormData('');\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    pre = document.getElementById('outputContent');\r\n    document.getElementById('loadScenarioButton').addEventListener('click', function() {\r\n        if (typeof window.load === 'function') {\r\n            window.load();\r\n        }\r\n    });\r\n\r\n    document.getElementById('startRunButton').addEventListener('click', function() {\r\n        // 走行開始の処理をここに追加\r\n        pre.innerHTML += \"走行を開始します。\\n\";\r\n        if (typeof window.main === 'function') {\r\n            window.main();\r\n        }\r\n    });\r\n    document.getElementById('startUnitTestButton').addEventListener('click', function() {\r\n        if (typeof window.main === 'function') {\r\n            window.runUnitTest();\r\n        }\r\n    });\r\n});"],"names":["formatTimestamp","date","LOG_TRACE","args","LOG_DBG","now","timestamp","msec","MessageQueue","task","msg","resolve","SorotTask","message","_Scenario","commandSet","i","itr","senarioNo","commandSetNo","count","__publicField","Scenario","Message","cmdId","cmdData","dataLen","nextMessage","_ScenarioControl","rcvMsg","data","len","idx","sndMsg","bStart","marker","e","sonorEnable","ScenarioControl","_StatusMonitor","colorMonitor","hwMonitor","colorInfo","bodyInfo","coordinateInfo","error","StatusMonitor","SorotMotor","name","port","pwm","theta","omega","u","CHANGERATE_CNT","Color","ColorMonitor","changeCount","value","values","max","min","sum","a","b","CoordinateInfo","HWMonitor","motorL","motorR","wheelRadius","storeEncoder","offset","newEncoderL","newEncoderR","degMoter","degNXT","direction","dir1","syahen","rad","newEncorder","speedSumTmp","wkPrm","oldValue","newValue","ary","numAry","d","cnt","coordCorrectInfo","on_off","LeftMotor","RightMotor","_Sorot","taskId","black","white","gray","status","Sorot","_SwitchMethod","calibInfo","SwitchMethod","TimeASM","VarASM","ret","ColorASM","DirASM","p_Diff","coordinate","DistanceASM","distance","_Navigator","entry","_a","changeType","sno","cno","Navigator","RunParameter","forward","turn","RunMethod","calibrationInfo","RunInfo","EdgePidRunning","edge","runInfo","runParam","proportional","integral","differential","gain","kp","threshold","diff","light","deviation","output","percentage","ki","tmp","total","kd","LinearRunning","thisBodyInfo","diffEncoderValue","turnTmp","diffEncoderValueRL","RevolutionRunning","LEFT_EDGE_PID","RIGHT_EDGE_PID","REVOLUTION","LINEAR","m_runMethodTbl","RunMethodFactory","type","SEASOR_W","_RunControl","armMotor","rp","bi","base","tmpL","tmpR","ang","dif","fwd","calib","RunControl","YAMLConfigLoader","script","yamlText","filePath","response","filePaths","configs","fileName","YAMLConfigManager","checkParser","years","year","config","configFiles","Robot","scale","leftCount","rightCount","driveDirection","initialAngle","vl","vr","v","angularVel","dt","CanvasManager","robotInstance","event","mouseX","mouseY","m","dx","dy","dist2","radius","time","hoverFound","color1","color2","brightness1","brightness2","brightness","rgb","left","right","imgpath","pdf","page","viewport","renderContext","ctx","robot","x","y","angle","sensorX","sensorY","pixel","ScenarioJsonLoader","scenarioData","result","initializedResult","url","jsonText","FormData","formId","fieldId","field","coord","pre","canvas","RCVHEADERSIZE","runNavigator","instance","runStautsMonitor","runScenarioControl","sorotTask","runRunControl","runLoadScenario","rcv","DUMMYPC_initialize","DUMMYPC_loadScenario","subScenario","DUMMYPC_calibration","length","listNo","mIndex","sList","runScenario","DUMMYPC_readyToStart","load","scenarioInput","main","globalObj","runUnitTest","sd","loader","index","scenario","leftMotor","rightMotor","configManager","canvasManager","text"],"mappings":"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"}